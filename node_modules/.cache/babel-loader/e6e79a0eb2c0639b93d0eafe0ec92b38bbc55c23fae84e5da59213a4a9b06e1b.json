{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mttgo\\\\OneDrive\\\\Desktop\\\\Cursor Projects\\\\webapps\\\\flocking-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Flocking from './components/Flocking';\nimport Controls from './components/Controls';\nimport DisplaySettings from './components/DisplaySettings';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [params, setParams] = useState({\n    separation: 1.5,\n    alignment: 1.0,\n    cohesion: 1.0,\n    newAgents: 5\n  });\n  const [displaySettings, setDisplaySettings] = useState({\n    trailLength: 200,\n    trailThickness: 0.5,\n    trailType: 'line',\n    keepTrails: false,\n    colorMode: 'single',\n    agentShape: 'triangle',\n    agentSize: 1,\n    fadeAmount: 25,\n    colors: {\n      main: '#ffffff',\n      start: '#ff0000',\n      end: '#0000ff',\n      agent: '#ffffff',\n      background: '#000000'\n    }\n  });\n  const [isPaused, setIsPaused] = useState(false);\n  const handleParamChange = (param, value) => {\n    setParams(prev => ({\n      ...prev,\n      [param]: value\n    }));\n  };\n  const handleDisplaySettingsChange = newSettings => {\n    setDisplaySettings(newSettings);\n  };\n  const togglePause = () => {\n    setIsPaused(prev => !prev);\n  };\n  const downloadSVG = () => {\n    // Get the canvas dimensions\n    const canvas = document.querySelector('.canvas-container canvas');\n    if (!canvas) {\n      console.error('Canvas element not found');\n      return;\n    }\n    const width = canvas.width;\n    const height = canvas.height;\n\n    // Create an SVG element\n    const svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    svgElement.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n    svgElement.setAttribute(\"version\", \"1.1\");\n    svgElement.setAttribute(\"width\", width);\n    svgElement.setAttribute(\"height\", height);\n    svgElement.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n\n    // Create background rectangle with current background color\n    const bgRect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n    bgRect.setAttribute(\"width\", width);\n    bgRect.setAttribute(\"height\", height);\n    bgRect.setAttribute(\"fill\", displaySettings.colors.background || '#000000');\n    svgElement.appendChild(bgRect);\n\n    // Get boids from the p5 instance\n    const p5Instance = document.querySelector('.canvas-container').p5;\n    if (!p5Instance) {\n      console.error('p5 instance not found');\n      return;\n    }\n    try {\n      // Create a group for boids\n      const boidsGroup = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n\n      // Access the internal boids array - this depends on the sketch structure\n      const sketch = p5Instance._registeredMethods.post[0].bind(p5Instance);\n      const boids = p5Instance.getSketch().boids || [];\n\n      // Loop through all boids and create SVG paths for them\n      boids.forEach(boid => {\n        if (displaySettings.agentShape === 'triangle') {\n          // Create a triangle for each boid\n          const triangle = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n\n          // Calculate points for triangle based on boid's position and direction\n          const theta = Math.atan2(boid.vy, boid.vx) + Math.PI / 2;\n          const size = displaySettings.agentSize * 5 || 5;\n          const x1 = boid.x;\n          const y1 = boid.y - size * 2;\n          const x2 = boid.x - size;\n          const y2 = boid.y + size * 2;\n          const x3 = boid.x + size;\n          const y3 = boid.y + size * 2;\n\n          // Apply rotation\n          const transformedPoints = [rotatePoint(x1, y1, boid.x, boid.y, theta), rotatePoint(x2, y2, boid.x, boid.y, theta), rotatePoint(x3, y3, boid.x, boid.y, theta)];\n          const pointsString = transformedPoints.map(p => `${p.x},${p.y}`).join(' ');\n          triangle.setAttribute(\"points\", pointsString);\n          triangle.setAttribute(\"fill\", displaySettings.colors.agent || 'white');\n          boidsGroup.appendChild(triangle);\n        } else {\n          // Create a circle for each boid\n          const circle = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n          circle.setAttribute(\"cx\", boid.x);\n          circle.setAttribute(\"cy\", boid.y);\n          circle.setAttribute(\"r\", displaySettings.agentSize * 5 || 5);\n          circle.setAttribute(\"fill\", displaySettings.colors.agent || 'white');\n          boidsGroup.appendChild(circle);\n        }\n\n        // Add trails if needed\n        if (boid.trail && boid.trail.length > 1) {\n          const trail = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n          let pathData = `M ${boid.trail[0].x} ${boid.trail[0].y}`;\n          for (let i = 1; i < boid.trail.length; i++) {\n            pathData += ` L ${boid.trail[i].x} ${boid.trail[i].y}`;\n          }\n          trail.setAttribute(\"d\", pathData);\n          trail.setAttribute(\"fill\", \"none\");\n          trail.setAttribute(\"stroke\", displaySettings.colors.main || 'white');\n          trail.setAttribute(\"stroke-width\", displaySettings.trailThickness || 0.5);\n          if (displaySettings.trailType === 'dashed') {\n            trail.setAttribute(\"stroke-dasharray\", \"4,4\");\n          }\n          boidsGroup.appendChild(trail);\n        }\n      });\n      svgElement.appendChild(boidsGroup);\n\n      // Helper function to rotate a point around a center\n      function rotatePoint(x, y, cx, cy, angle) {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n        const nx = cos * (x - cx) - sin * (y - cy) + cx;\n        const ny = sin * (x - cx) + cos * (y - cy) + cy;\n        return {\n          x: nx,\n          y: ny\n        };\n      }\n\n      // Convert the SVG to a string\n      const svgData = new XMLSerializer().serializeToString(svgElement);\n      const svgBlob = new Blob(['<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n', svgData], {\n        type: 'image/svg+xml;charset=utf-8'\n      });\n      const svgUrl = URL.createObjectURL(svgBlob);\n\n      // Create and trigger download\n      const link = document.createElement('a');\n      link.href = svgUrl;\n      link.download = 'flocking-simulation.svg';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(svgUrl);\n    } catch (e) {\n      console.error('Error generating SVG:', e);\n      alert('Could not generate SVG. Falling back to PNG download.');\n\n      // Fallback to PNG if SVG creation fails\n      const link = document.createElement('a');\n      link.download = 'flocking-simulation.png';\n      link.href = canvas.toDataURL('image/png');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"simulation-container\",\n      children: [/*#__PURE__*/_jsxDEV(Flocking, {\n        params: params,\n        displaySettings: displaySettings,\n        isPaused: isPaused\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {\n        params: params,\n        onParamChange: handleParamChange,\n        isPaused: isPaused,\n        onTogglePause: togglePause,\n        onDownloadSVG: downloadSVG\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DisplaySettings, {\n        settings: displaySettings,\n        onSettingsChange: handleDisplaySettingsChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0kb9MZFdM3aAe5D0hziGdWk3EjI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Flocking","Controls","DisplaySettings","jsxDEV","_jsxDEV","App","_s","params","setParams","separation","alignment","cohesion","newAgents","displaySettings","setDisplaySettings","trailLength","trailThickness","trailType","keepTrails","colorMode","agentShape","agentSize","fadeAmount","colors","main","start","end","agent","background","isPaused","setIsPaused","handleParamChange","param","value","prev","handleDisplaySettingsChange","newSettings","togglePause","downloadSVG","canvas","document","querySelector","console","error","width","height","svgElement","createElementNS","setAttribute","bgRect","appendChild","p5Instance","p5","boidsGroup","sketch","_registeredMethods","post","bind","boids","getSketch","forEach","boid","triangle","theta","Math","atan2","vy","vx","PI","size","x1","x","y1","y","x2","y2","x3","y3","transformedPoints","rotatePoint","pointsString","map","p","join","circle","trail","length","pathData","i","cx","cy","angle","cos","sin","nx","ny","svgData","XMLSerializer","serializeToString","svgBlob","Blob","type","svgUrl","URL","createObjectURL","link","createElement","href","download","body","click","removeChild","revokeObjectURL","e","alert","toDataURL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onParamChange","onTogglePause","onDownloadSVG","settings","onSettingsChange","_c","$RefreshReg$"],"sources":["C:/Users/mttgo/OneDrive/Desktop/Cursor Projects/webapps/flocking-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Flocking from './components/Flocking';\r\nimport Controls from './components/Controls';\r\nimport DisplaySettings from './components/DisplaySettings';\r\nimport './styles/App.css';\r\n\r\nfunction App() {\r\n  const [params, setParams] = useState({\r\n    separation: 1.5,\r\n    alignment: 1.0,\r\n    cohesion: 1.0,\r\n    newAgents: 5\r\n  });\r\n  \r\n  const [displaySettings, setDisplaySettings] = useState({\r\n    trailLength: 200,\r\n    trailThickness: 0.5,\r\n    trailType: 'line',\r\n    keepTrails: false,\r\n    colorMode: 'single',\r\n    agentShape: 'triangle',\r\n    agentSize: 1,\r\n    fadeAmount: 25,\r\n    colors: {\r\n      main: '#ffffff',\r\n      start: '#ff0000',\r\n      end: '#0000ff',\r\n      agent: '#ffffff',\r\n      background: '#000000'\r\n    }\r\n  });\r\n\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  \r\n  const handleParamChange = (param, value) => {\r\n    setParams(prev => ({\r\n      ...prev,\r\n      [param]: value\r\n    }));\r\n  };\r\n  \r\n  const handleDisplaySettingsChange = (newSettings) => {\r\n    setDisplaySettings(newSettings);\r\n  };\r\n\r\n  const togglePause = () => {\r\n    setIsPaused(prev => !prev);\r\n  };\r\n  \r\n  const downloadSVG = () => {\r\n    // Get the canvas dimensions\r\n    const canvas = document.querySelector('.canvas-container canvas');\r\n    if (!canvas) {\r\n      console.error('Canvas element not found');\r\n      return;\r\n    }\r\n    \r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n    \r\n    // Create an SVG element\r\n    const svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n    svgElement.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\r\n    svgElement.setAttribute(\"version\", \"1.1\");\r\n    svgElement.setAttribute(\"width\", width);\r\n    svgElement.setAttribute(\"height\", height);\r\n    svgElement.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\r\n    \r\n    // Create background rectangle with current background color\r\n    const bgRect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\r\n    bgRect.setAttribute(\"width\", width);\r\n    bgRect.setAttribute(\"height\", height);\r\n    bgRect.setAttribute(\"fill\", displaySettings.colors.background || '#000000');\r\n    svgElement.appendChild(bgRect);\r\n    \r\n    // Get boids from the p5 instance\r\n    const p5Instance = document.querySelector('.canvas-container').p5;\r\n    if (!p5Instance) {\r\n      console.error('p5 instance not found');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Create a group for boids\r\n      const boidsGroup = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n      \r\n      // Access the internal boids array - this depends on the sketch structure\r\n      const sketch = p5Instance._registeredMethods.post[0].bind(p5Instance);\r\n      const boids = p5Instance.getSketch().boids || [];\r\n      \r\n      // Loop through all boids and create SVG paths for them\r\n      boids.forEach(boid => {\r\n        if (displaySettings.agentShape === 'triangle') {\r\n          // Create a triangle for each boid\r\n          const triangle = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\r\n          \r\n          // Calculate points for triangle based on boid's position and direction\r\n          const theta = Math.atan2(boid.vy, boid.vx) + Math.PI/2;\r\n          const size = displaySettings.agentSize * 5 || 5;\r\n          \r\n          const x1 = boid.x;\r\n          const y1 = boid.y - size*2;\r\n          const x2 = boid.x - size;\r\n          const y2 = boid.y + size*2;\r\n          const x3 = boid.x + size;\r\n          const y3 = boid.y + size*2;\r\n          \r\n          // Apply rotation\r\n          const transformedPoints = [\r\n            rotatePoint(x1, y1, boid.x, boid.y, theta),\r\n            rotatePoint(x2, y2, boid.x, boid.y, theta),\r\n            rotatePoint(x3, y3, boid.x, boid.y, theta)\r\n          ];\r\n          \r\n          const pointsString = transformedPoints\r\n            .map(p => `${p.x},${p.y}`)\r\n            .join(' ');\r\n            \r\n          triangle.setAttribute(\"points\", pointsString);\r\n          triangle.setAttribute(\"fill\", displaySettings.colors.agent || 'white');\r\n          \r\n          boidsGroup.appendChild(triangle);\r\n        } else {\r\n          // Create a circle for each boid\r\n          const circle = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\r\n          circle.setAttribute(\"cx\", boid.x);\r\n          circle.setAttribute(\"cy\", boid.y);\r\n          circle.setAttribute(\"r\", displaySettings.agentSize * 5 || 5);\r\n          circle.setAttribute(\"fill\", displaySettings.colors.agent || 'white');\r\n          \r\n          boidsGroup.appendChild(circle);\r\n        }\r\n        \r\n        // Add trails if needed\r\n        if (boid.trail && boid.trail.length > 1) {\r\n          const trail = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n          \r\n          let pathData = `M ${boid.trail[0].x} ${boid.trail[0].y}`;\r\n          for (let i = 1; i < boid.trail.length; i++) {\r\n            pathData += ` L ${boid.trail[i].x} ${boid.trail[i].y}`;\r\n          }\r\n          \r\n          trail.setAttribute(\"d\", pathData);\r\n          trail.setAttribute(\"fill\", \"none\");\r\n          trail.setAttribute(\"stroke\", displaySettings.colors.main || 'white');\r\n          trail.setAttribute(\"stroke-width\", displaySettings.trailThickness || 0.5);\r\n          if (displaySettings.trailType === 'dashed') {\r\n            trail.setAttribute(\"stroke-dasharray\", \"4,4\");\r\n          }\r\n          \r\n          boidsGroup.appendChild(trail);\r\n        }\r\n      });\r\n      \r\n      svgElement.appendChild(boidsGroup);\r\n      \r\n      // Helper function to rotate a point around a center\r\n      function rotatePoint(x, y, cx, cy, angle) {\r\n        const cos = Math.cos(angle);\r\n        const sin = Math.sin(angle);\r\n        const nx = (cos * (x - cx)) - (sin * (y - cy)) + cx;\r\n        const ny = (sin * (x - cx)) + (cos * (y - cy)) + cy;\r\n        return { x: nx, y: ny };\r\n      }\r\n      \r\n      // Convert the SVG to a string\r\n      const svgData = new XMLSerializer().serializeToString(svgElement);\r\n      const svgBlob = new Blob([\r\n        '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n',\r\n        svgData\r\n      ], { type: 'image/svg+xml;charset=utf-8' });\r\n      const svgUrl = URL.createObjectURL(svgBlob);\r\n      \r\n      // Create and trigger download\r\n      const link = document.createElement('a');\r\n      link.href = svgUrl;\r\n      link.download = 'flocking-simulation.svg';\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(svgUrl);\r\n    } catch (e) {\r\n      console.error('Error generating SVG:', e);\r\n      alert('Could not generate SVG. Falling back to PNG download.');\r\n      \r\n      // Fallback to PNG if SVG creation fails\r\n      const link = document.createElement('a');\r\n      link.download = 'flocking-simulation.png';\r\n      link.href = canvas.toDataURL('image/png');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"simulation-container\">\r\n        <Flocking \r\n          params={params} \r\n          displaySettings={displaySettings}\r\n          isPaused={isPaused}\r\n        />\r\n        <Controls \r\n          params={params} \r\n          onParamChange={handleParamChange}\r\n          isPaused={isPaused}\r\n          onTogglePause={togglePause}\r\n          onDownloadSVG={downloadSVG}\r\n        />\r\n        <DisplaySettings \r\n          settings={displaySettings} \r\n          onSettingsChange={handleDisplaySettingsChange} \r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}