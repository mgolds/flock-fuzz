{"ast":null,"code":"import SimpleBoid from './simpleBoid';\nexport const simpleFlockingSketch = p => {\n  let boids = [];\n  let params = {\n    separation: 1.5,\n    alignment: 1.0,\n    cohesion: 1.0,\n    newAgents: 10\n  };\n  let displaySettings = {\n    trailLength: 300,\n    trailThickness: 0.3,\n    trailType: 'line',\n    colorMode: 'single',\n    agentShape: 'triangle',\n    agentSize: 0.7,\n    fadeAmount: 25,\n    colors: {\n      main: '#ffffff',\n      start: '#ff0000',\n      end: '#0000ff',\n      agent: '#ffffff',\n      background: '#000000'\n    }\n  };\n  let isDragging = false;\n  let lastMouseX = 0;\n  let lastMouseY = 0;\n  let addCooldown = 0;\n  let boidCounter = 0; // For assigning unique IDs to boids\n  let isPaused = false;\n\n  // External method to update parameters\n  p.updateParams = newParams => {\n    params = {\n      ...params,\n      ...newParams\n    };\n\n    // Pass colorRandomness parameter to displaySettings\n    if (newParams.colorRandomness !== undefined) {\n      displaySettings.colorRandomness = newParams.colorRandomness;\n\n      // Update boids with modified settings\n      for (const boid of boids) {\n        boid.updateSettings(displaySettings);\n      }\n    }\n\n    // Update simulation speed if changed\n    if (newParams.simulationSpeed !== undefined) {\n      displaySettings.simulationSpeed = newParams.simulationSpeed;\n\n      // Update boids with the new simulation speed\n      for (const boid of boids) {\n        boid.updateSettings(displaySettings);\n      }\n    }\n  };\n\n  // External method to update display settings\n  p.updateDisplaySettings = newSettings => {\n    displaySettings = {\n      ...displaySettings,\n      ...newSettings\n    };\n\n    // Update existing boids with new settings\n    for (const boid of boids) {\n      boid.updateSettings(displaySettings);\n    }\n  };\n\n  // External method to set paused state\n  p.setPaused = paused => {\n    isPaused = paused;\n  };\n\n  // Method to access boids array for SVG generation\n  p.getBoids = () => {\n    return boids;\n  };\n  p.setup = () => {\n    const canvasWidth = window.innerWidth;\n    const canvasHeight = window.innerHeight;\n    const canvas = p.createCanvas(canvasWidth, canvasHeight);\n    canvas.parent(p.canvas.parentElement);\n\n    // Initialize with some boids\n    for (let i = 0; i < 50; i++) {\n      boidCounter++;\n      boids.push(new SimpleBoid(p, p.random(p.width), p.random(p.height), displaySettings, boidCounter));\n    }\n  };\n  p.windowResized = () => {\n    const canvasWidth = window.innerWidth;\n    const canvasHeight = window.innerHeight;\n    p.resizeCanvas(canvasWidth, canvasHeight);\n  };\n  p.mousePressed = () => {\n    // Check if mouse is over the canvas and not over UI controls\n    if (p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height && !isMouseOverControls()) {\n      isDragging = true;\n      lastMouseX = p.mouseX;\n      lastMouseY = p.mouseY;\n\n      // Add boids on initial click\n      addBoidsAtPosition(p.mouseX, p.mouseY);\n    }\n  };\n  p.mouseReleased = () => {\n    isDragging = false;\n    addCooldown = 0;\n  };\n  p.mouseDragged = () => {\n    // Check if mouse is over the canvas and not over UI controls\n    if (isDragging && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height && !isMouseOverControls()) {\n      // Add boids when dragging with a cooldown to control rate\n      if (addCooldown <= 0) {\n        addBoidsAtPosition(p.mouseX, p.mouseY);\n        addCooldown = 5; // Frames to wait before adding more boids\n      } else {\n        addCooldown--;\n      }\n      lastMouseX = p.mouseX;\n      lastMouseY = p.mouseY;\n    }\n  };\n\n  // Helper function to check if mouse is over UI controls\n  const isMouseOverControls = () => {\n    // Check for controls container DOM elements\n    const controlsElements = document.querySelectorAll('.controls, .display-settings');\n    for (const element of controlsElements) {\n      const rect = element.getBoundingClientRect();\n      if (p.mouseX >= rect.left && p.mouseX <= rect.right && p.mouseY >= rect.top && p.mouseY <= rect.bottom) {\n        return true;\n      }\n    }\n    return false;\n  };\n  const addBoidsAtPosition = (x, y) => {\n    const count = params.newAgents || 5;\n    for (let i = 0; i < count; i++) {\n      boidCounter++;\n      const boid = new SimpleBoid(p, x + p.random(-10, 10), y + p.random(-10, 10), displaySettings, boidCounter);\n      boids.push(boid);\n    }\n  };\n  p.draw = () => {\n    // Get background color from settings\n    const bgColor = displaySettings.colors.background || '#000000';\n    const fadeAmount = displaySettings.fadeAmount || 25;\n\n    // Convert hex background color to RGB\n    const bg = hexToRgb(bgColor);\n\n    // Set a semi-transparent background to create a fading trail effect\n    p.background(bg.r, bg.g, bg.b, fadeAmount);\n\n    // If paused, don't update boid positions\n    if (!isPaused) {\n      for (let boid of boids) {\n        boid.flock(boids, params);\n        boid.update();\n        boid.edges();\n      }\n    }\n\n    // Always draw boids even when paused\n    for (let boid of boids) {\n      boid.show();\n    }\n\n    // Draw cursor trail when dragging\n    if (isDragging && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\n      p.stroke(100, 200, 255, 100);\n      p.strokeWeight(2);\n      p.line(lastMouseX, lastMouseY, p.mouseX, p.mouseY);\n    }\n  };\n\n  // Helper function to convert hex color to RGB\n  const hexToRgb = hex => {\n    // Default to black if no hex provided\n    if (!hex) return {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n\n    // Remove # if present\n    hex = hex.replace('#', '');\n\n    // Convert hex to RGB\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    return {\n      r,\n      g,\n      b\n    };\n  };\n};","map":{"version":3,"names":["SimpleBoid","simpleFlockingSketch","p","boids","params","separation","alignment","cohesion","newAgents","displaySettings","trailLength","trailThickness","trailType","colorMode","agentShape","agentSize","fadeAmount","colors","main","start","end","agent","background","isDragging","lastMouseX","lastMouseY","addCooldown","boidCounter","isPaused","updateParams","newParams","colorRandomness","undefined","boid","updateSettings","simulationSpeed","updateDisplaySettings","newSettings","setPaused","paused","getBoids","setup","canvasWidth","window","innerWidth","canvasHeight","innerHeight","canvas","createCanvas","parent","parentElement","i","push","random","width","height","windowResized","resizeCanvas","mousePressed","mouseX","mouseY","isMouseOverControls","addBoidsAtPosition","mouseReleased","mouseDragged","controlsElements","document","querySelectorAll","element","rect","getBoundingClientRect","left","right","top","bottom","x","y","count","draw","bgColor","bg","hexToRgb","r","g","b","flock","update","edges","show","stroke","strokeWeight","line","hex","replace","parseInt","substring"],"sources":["C:/Users/mttgo/OneDrive/Desktop/Cursor Projects/webapps/flocking-app/src/sketches/simpleFlockingSketch.js"],"sourcesContent":["import SimpleBoid from './simpleBoid';\r\n\r\nexport const simpleFlockingSketch = (p) => {\r\n  let boids = [];\r\n  let params = {\r\n    separation: 1.5,\r\n    alignment: 1.0,\r\n    cohesion: 1.0,\r\n    newAgents: 10\r\n  };\r\n  let displaySettings = {\r\n    trailLength: 300,\r\n    trailThickness: 0.3,\r\n    trailType: 'line',\r\n    colorMode: 'single',\r\n    agentShape: 'triangle',\r\n    agentSize: 0.7,\r\n    fadeAmount: 25,\r\n    colors: {\r\n      main: '#ffffff',\r\n      start: '#ff0000',\r\n      end: '#0000ff',\r\n      agent: '#ffffff',\r\n      background: '#000000'\r\n    }\r\n  };\r\n  let isDragging = false;\r\n  let lastMouseX = 0;\r\n  let lastMouseY = 0;\r\n  let addCooldown = 0;\r\n  let boidCounter = 0; // For assigning unique IDs to boids\r\n  let isPaused = false;\r\n  \r\n  // External method to update parameters\r\n  p.updateParams = (newParams) => {\r\n    params = { ...params, ...newParams };\r\n    \r\n    // Pass colorRandomness parameter to displaySettings\r\n    if (newParams.colorRandomness !== undefined) {\r\n      displaySettings.colorRandomness = newParams.colorRandomness;\r\n      \r\n      // Update boids with modified settings\r\n      for (const boid of boids) {\r\n        boid.updateSettings(displaySettings);\r\n      }\r\n    }\r\n    \r\n    // Update simulation speed if changed\r\n    if (newParams.simulationSpeed !== undefined) {\r\n      displaySettings.simulationSpeed = newParams.simulationSpeed;\r\n      \r\n      // Update boids with the new simulation speed\r\n      for (const boid of boids) {\r\n        boid.updateSettings(displaySettings);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // External method to update display settings\r\n  p.updateDisplaySettings = (newSettings) => {\r\n    displaySettings = { ...displaySettings, ...newSettings };\r\n    \r\n    // Update existing boids with new settings\r\n    for (const boid of boids) {\r\n      boid.updateSettings(displaySettings);\r\n    }\r\n  };\r\n  \r\n  // External method to set paused state\r\n  p.setPaused = (paused) => {\r\n    isPaused = paused;\r\n  };\r\n  \r\n  // Method to access boids array for SVG generation\r\n  p.getBoids = () => {\r\n    return boids;\r\n  };\r\n  \r\n  p.setup = () => {\r\n    const canvasWidth = window.innerWidth;\r\n    const canvasHeight = window.innerHeight;\r\n    const canvas = p.createCanvas(canvasWidth, canvasHeight);\r\n    canvas.parent(p.canvas.parentElement);\r\n    \r\n    // Initialize with some boids\r\n    for (let i = 0; i < 50; i++) {\r\n      boidCounter++;\r\n      boids.push(new SimpleBoid(\r\n        p, \r\n        p.random(p.width), \r\n        p.random(p.height), \r\n        displaySettings,\r\n        boidCounter\r\n      ));\r\n    }\r\n  };\r\n  \r\n  p.windowResized = () => {\r\n    const canvasWidth = window.innerWidth;\r\n    const canvasHeight = window.innerHeight;\r\n    p.resizeCanvas(canvasWidth, canvasHeight);\r\n  };\r\n  \r\n  p.mousePressed = () => {\r\n    // Check if mouse is over the canvas and not over UI controls\r\n    if (p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height && !isMouseOverControls()) {\r\n      isDragging = true;\r\n      lastMouseX = p.mouseX;\r\n      lastMouseY = p.mouseY;\r\n      \r\n      // Add boids on initial click\r\n      addBoidsAtPosition(p.mouseX, p.mouseY);\r\n    }\r\n  };\r\n  \r\n  p.mouseReleased = () => {\r\n    isDragging = false;\r\n    addCooldown = 0;\r\n  };\r\n  \r\n  p.mouseDragged = () => {\r\n    // Check if mouse is over the canvas and not over UI controls\r\n    if (isDragging && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height && !isMouseOverControls()) {\r\n      // Add boids when dragging with a cooldown to control rate\r\n      if (addCooldown <= 0) {\r\n        addBoidsAtPosition(p.mouseX, p.mouseY);\r\n        addCooldown = 5; // Frames to wait before adding more boids\r\n      } else {\r\n        addCooldown--;\r\n      }\r\n      lastMouseX = p.mouseX;\r\n      lastMouseY = p.mouseY;\r\n    }\r\n  };\r\n  \r\n  // Helper function to check if mouse is over UI controls\r\n  const isMouseOverControls = () => {\r\n    // Check for controls container DOM elements\r\n    const controlsElements = document.querySelectorAll('.controls, .display-settings');\r\n    for (const element of controlsElements) {\r\n      const rect = element.getBoundingClientRect();\r\n      if (\r\n        p.mouseX >= rect.left && \r\n        p.mouseX <= rect.right && \r\n        p.mouseY >= rect.top && \r\n        p.mouseY <= rect.bottom\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  const addBoidsAtPosition = (x, y) => {\r\n    const count = params.newAgents || 5;\r\n    for (let i = 0; i < count; i++) {\r\n      boidCounter++;\r\n      const boid = new SimpleBoid(\r\n        p,\r\n        x + p.random(-10, 10),\r\n        y + p.random(-10, 10),\r\n        displaySettings,\r\n        boidCounter\r\n      );\r\n      boids.push(boid);\r\n    }\r\n  };\r\n  \r\n  p.draw = () => {\r\n    // Get background color from settings\r\n    const bgColor = displaySettings.colors.background || '#000000';\r\n    const fadeAmount = displaySettings.fadeAmount || 25;\r\n    \r\n    // Convert hex background color to RGB\r\n    const bg = hexToRgb(bgColor);\r\n    \r\n    // Set a semi-transparent background to create a fading trail effect\r\n    p.background(bg.r, bg.g, bg.b, fadeAmount);\r\n    \r\n    // If paused, don't update boid positions\r\n    if (!isPaused) {\r\n      for (let boid of boids) {\r\n        boid.flock(boids, params);\r\n        boid.update();\r\n        boid.edges();\r\n      }\r\n    }\r\n    \r\n    // Always draw boids even when paused\r\n    for (let boid of boids) {\r\n      boid.show();\r\n    }\r\n    \r\n    // Draw cursor trail when dragging\r\n    if (isDragging && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\r\n      p.stroke(100, 200, 255, 100);\r\n      p.strokeWeight(2);\r\n      p.line(lastMouseX, lastMouseY, p.mouseX, p.mouseY);\r\n    }\r\n  };\r\n  \r\n  // Helper function to convert hex color to RGB\r\n  const hexToRgb = (hex) => {\r\n    // Default to black if no hex provided\r\n    if (!hex) return { r: 0, g: 0, b: 0 };\r\n    \r\n    // Remove # if present\r\n    hex = hex.replace('#', '');\r\n    \r\n    // Convert hex to RGB\r\n    const r = parseInt(hex.substring(0, 2), 16);\r\n    const g = parseInt(hex.substring(2, 4), 16);\r\n    const b = parseInt(hex.substring(4, 6), 16);\r\n    \r\n    return { r, g, b };\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}