{"ast":null,"code":"import SimpleBoid from './simpleBoid';\nexport const simpleFlockingSketch = p => {\n  let boids = [];\n  let params = {\n    separation: 1.5,\n    alignment: 1.0,\n    cohesion: 1.0,\n    newAgents: 5\n  };\n  let displaySettings = {\n    trailLength: 50,\n    trailThickness: 0.5,\n    trailType: 'line',\n    keepTrails: false,\n    colorMode: 'single',\n    agentShape: 'triangle',\n    agentSize: 1,\n    fadeAmount: 25,\n    colors: {\n      main: '#ffffff',\n      start: '#ff0000',\n      end: '#0000ff',\n      agent: '#ffffff',\n      background: '#000000'\n    }\n  };\n  let isDragging = false;\n  let lastMouseX = 0;\n  let lastMouseY = 0;\n  let addCooldown = 0;\n  let boidCounter = 0; // For assigning unique IDs to boids\n\n  // External method to update parameters\n  p.updateParams = newParams => {\n    params = {\n      ...params,\n      ...newParams\n    };\n  };\n\n  // External method to update display settings\n  p.updateDisplaySettings = newSettings => {\n    displaySettings = {\n      ...displaySettings,\n      ...newSettings\n    };\n\n    // Update existing boids with new settings\n    for (const boid of boids) {\n      boid.updateSettings(displaySettings);\n    }\n  };\n  p.setup = () => {\n    const canvasWidth = window.innerWidth;\n    const canvasHeight = window.innerHeight;\n    p.createCanvas(canvasWidth, canvasHeight);\n\n    // Initialize with some boids\n    for (let i = 0; i < 50; i++) {\n      boidCounter++;\n      boids.push(new SimpleBoid(p, p.random(p.width), p.random(p.height), displaySettings, boidCounter));\n    }\n  };\n  p.windowResized = () => {\n    const canvasWidth = window.innerWidth;\n    const canvasHeight = window.innerHeight;\n    p.resizeCanvas(canvasWidth, canvasHeight);\n  };\n  p.mousePressed = () => {\n    if (p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\n      isDragging = true;\n      lastMouseX = p.mouseX;\n      lastMouseY = p.mouseY;\n\n      // Add boids on initial click\n      addBoidsAtPosition(p.mouseX, p.mouseY);\n    }\n  };\n  p.mouseReleased = () => {\n    isDragging = false;\n    addCooldown = 0;\n  };\n  p.mouseDragged = () => {\n    if (isDragging && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\n      // Add boids when dragging with a cooldown to control rate\n      if (addCooldown <= 0) {\n        addBoidsAtPosition(p.mouseX, p.mouseY);\n        addCooldown = 5; // Frames to wait before adding more boids\n      } else {\n        addCooldown--;\n      }\n      lastMouseX = p.mouseX;\n      lastMouseY = p.mouseY;\n    }\n  };\n  const addBoidsAtPosition = (x, y) => {\n    const count = params.newAgents || 5;\n    for (let i = 0; i < count; i++) {\n      boidCounter++;\n      const boid = new SimpleBoid(p, x + p.random(-10, 10), y + p.random(-10, 10), displaySettings, boidCounter);\n      boids.push(boid);\n    }\n  };\n  p.draw = () => {\n    // Get background color from settings\n    const bgColor = displaySettings.colors.background || '#000000';\n    const fadeAmount = displaySettings.fadeAmount || 25;\n\n    // Convert hex background color to RGB\n    const bg = hexToRgb(bgColor);\n\n    // Set a semi-transparent background to create a fading trail effect\n    p.background(bg.r, bg.g, bg.b, fadeAmount);\n    for (let boid of boids) {\n      boid.flock(boids, params);\n      boid.update();\n      boid.edges();\n      boid.show();\n    }\n\n    // Draw cursor trail when dragging\n    if (isDragging && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\n      p.stroke(100, 200, 255, 100);\n      p.strokeWeight(2);\n      p.line(lastMouseX, lastMouseY, p.mouseX, p.mouseY);\n    }\n  };\n\n  // Helper function to convert hex color to RGB\n  const hexToRgb = hex => {\n    // Default to black if no hex provided\n    if (!hex) return {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n\n    // Remove # if present\n    hex = hex.replace('#', '');\n\n    // Convert hex to RGB\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    return {\n      r,\n      g,\n      b\n    };\n  };\n};","map":{"version":3,"names":["SimpleBoid","simpleFlockingSketch","p","boids","params","separation","alignment","cohesion","newAgents","displaySettings","trailLength","trailThickness","trailType","keepTrails","colorMode","agentShape","agentSize","fadeAmount","colors","main","start","end","agent","background","isDragging","lastMouseX","lastMouseY","addCooldown","boidCounter","updateParams","newParams","updateDisplaySettings","newSettings","boid","updateSettings","setup","canvasWidth","window","innerWidth","canvasHeight","innerHeight","createCanvas","i","push","random","width","height","windowResized","resizeCanvas","mousePressed","mouseX","mouseY","addBoidsAtPosition","mouseReleased","mouseDragged","x","y","count","draw","bgColor","bg","hexToRgb","r","g","b","flock","update","edges","show","stroke","strokeWeight","line","hex","replace","parseInt","substring"],"sources":["C:/Users/mttgo/OneDrive/Desktop/Cursor Projects/webapps/flocking-app/src/sketches/simpleFlockingSketch.js"],"sourcesContent":["import SimpleBoid from './simpleBoid';\r\n\r\nexport const simpleFlockingSketch = (p) => {\r\n  let boids = [];\r\n  let params = {\r\n    separation: 1.5,\r\n    alignment: 1.0,\r\n    cohesion: 1.0,\r\n    newAgents: 5\r\n  };\r\n  let displaySettings = {\r\n    trailLength: 50,\r\n    trailThickness: 0.5,\r\n    trailType: 'line',\r\n    keepTrails: false,\r\n    colorMode: 'single',\r\n    agentShape: 'triangle',\r\n    agentSize: 1,\r\n    fadeAmount: 25,\r\n    colors: {\r\n      main: '#ffffff',\r\n      start: '#ff0000',\r\n      end: '#0000ff',\r\n      agent: '#ffffff',\r\n      background: '#000000'\r\n    }\r\n  };\r\n  let isDragging = false;\r\n  let lastMouseX = 0;\r\n  let lastMouseY = 0;\r\n  let addCooldown = 0;\r\n  let boidCounter = 0; // For assigning unique IDs to boids\r\n  \r\n  // External method to update parameters\r\n  p.updateParams = (newParams) => {\r\n    params = { ...params, ...newParams };\r\n  };\r\n  \r\n  // External method to update display settings\r\n  p.updateDisplaySettings = (newSettings) => {\r\n    displaySettings = { ...displaySettings, ...newSettings };\r\n    \r\n    // Update existing boids with new settings\r\n    for (const boid of boids) {\r\n      boid.updateSettings(displaySettings);\r\n    }\r\n  };\r\n  \r\n  p.setup = () => {\r\n    const canvasWidth = window.innerWidth;\r\n    const canvasHeight = window.innerHeight;\r\n    p.createCanvas(canvasWidth, canvasHeight);\r\n    \r\n    // Initialize with some boids\r\n    for (let i = 0; i < 50; i++) {\r\n      boidCounter++;\r\n      boids.push(new SimpleBoid(\r\n        p, \r\n        p.random(p.width), \r\n        p.random(p.height), \r\n        displaySettings,\r\n        boidCounter\r\n      ));\r\n    }\r\n  };\r\n  \r\n  p.windowResized = () => {\r\n    const canvasWidth = window.innerWidth;\r\n    const canvasHeight = window.innerHeight;\r\n    p.resizeCanvas(canvasWidth, canvasHeight);\r\n  };\r\n  \r\n  p.mousePressed = () => {\r\n    if (p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\r\n      isDragging = true;\r\n      lastMouseX = p.mouseX;\r\n      lastMouseY = p.mouseY;\r\n      \r\n      // Add boids on initial click\r\n      addBoidsAtPosition(p.mouseX, p.mouseY);\r\n    }\r\n  };\r\n  \r\n  p.mouseReleased = () => {\r\n    isDragging = false;\r\n    addCooldown = 0;\r\n  };\r\n  \r\n  p.mouseDragged = () => {\r\n    if (isDragging && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\r\n      // Add boids when dragging with a cooldown to control rate\r\n      if (addCooldown <= 0) {\r\n        addBoidsAtPosition(p.mouseX, p.mouseY);\r\n        addCooldown = 5; // Frames to wait before adding more boids\r\n      } else {\r\n        addCooldown--;\r\n      }\r\n      lastMouseX = p.mouseX;\r\n      lastMouseY = p.mouseY;\r\n    }\r\n  };\r\n  \r\n  const addBoidsAtPosition = (x, y) => {\r\n    const count = params.newAgents || 5;\r\n    for (let i = 0; i < count; i++) {\r\n      boidCounter++;\r\n      const boid = new SimpleBoid(\r\n        p,\r\n        x + p.random(-10, 10),\r\n        y + p.random(-10, 10),\r\n        displaySettings,\r\n        boidCounter\r\n      );\r\n      boids.push(boid);\r\n    }\r\n  };\r\n  \r\n  p.draw = () => {\r\n    // Get background color from settings\r\n    const bgColor = displaySettings.colors.background || '#000000';\r\n    const fadeAmount = displaySettings.fadeAmount || 25;\r\n    \r\n    // Convert hex background color to RGB\r\n    const bg = hexToRgb(bgColor);\r\n    \r\n    // Set a semi-transparent background to create a fading trail effect\r\n    p.background(bg.r, bg.g, bg.b, fadeAmount);\r\n    \r\n    for (let boid of boids) {\r\n      boid.flock(boids, params);\r\n      boid.update();\r\n      boid.edges();\r\n      boid.show();\r\n    }\r\n    \r\n    // Draw cursor trail when dragging\r\n    if (isDragging && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\r\n      p.stroke(100, 200, 255, 100);\r\n      p.strokeWeight(2);\r\n      p.line(lastMouseX, lastMouseY, p.mouseX, p.mouseY);\r\n    }\r\n  };\r\n  \r\n  // Helper function to convert hex color to RGB\r\n  const hexToRgb = (hex) => {\r\n    // Default to black if no hex provided\r\n    if (!hex) return { r: 0, g: 0, b: 0 };\r\n    \r\n    // Remove # if present\r\n    hex = hex.replace('#', '');\r\n    \r\n    // Convert hex to RGB\r\n    const r = parseInt(hex.substring(0, 2), 16);\r\n    const g = parseInt(hex.substring(2, 4), 16);\r\n    const b = parseInt(hex.substring(4, 6), 16);\r\n    \r\n    return { r, g, b };\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}