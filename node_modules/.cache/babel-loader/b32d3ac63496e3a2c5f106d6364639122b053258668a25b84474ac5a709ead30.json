{"ast":null,"code":"// Class for representing a single boid\nclass SimpleBoid {\n  constructor(p, x, y) {\n    // Store p5 instance\n    this.p = p;\n\n    // Position\n    this.x = x;\n    this.y = y;\n\n    // Generate random velocity\n    const angle = p.random(p.TWO_PI);\n    const speed = p.random(2, 4);\n    this.vx = p.cos(angle) * speed;\n    this.vy = p.sin(angle) * speed;\n\n    // Acceleration\n    this.ax = 0;\n    this.ay = 0;\n\n    // Properties\n    this.maxSpeed = 5;\n    this.maxForce = 0.2;\n    this.size = p.random(3, 6);\n\n    // Trail history\n    this.maxTrailLength = 50; // Maximum number of points to store in the trail\n    this.trail = []; // Array to store position history\n    this.trailOpacity = p.random(40, 80); // Random opacity for variety\n  }\n\n  // Apply flocking behavior\n  flock(boids, params) {\n    // Reset acceleration\n    this.ax = 0;\n    this.ay = 0;\n\n    // Calculate forces\n    const separation = this.separate(boids);\n    const alignment = this.align(boids);\n    const cohesion = this.cohere(boids);\n\n    // Apply weights from params\n    separation.x *= params.separation || 1.5;\n    separation.y *= params.separation || 1.5;\n    alignment.x *= params.alignment || 1.0;\n    alignment.y *= params.alignment || 1.0;\n    cohesion.x *= params.cohesion || 1.0;\n    cohesion.y *= params.cohesion || 1.0;\n\n    // Add all forces to acceleration\n    this.ax += separation.x + alignment.x + cohesion.x;\n    this.ay += separation.y + alignment.y + cohesion.y;\n  }\n\n  // Update position and velocity\n  update() {\n    // Update velocity with acceleration\n    this.vx += this.ax;\n    this.vy += this.ay;\n\n    // Limit speed\n    const speed = Math.sqrt(this.vx * this.vx + this.vy * this.vy);\n    if (speed > this.maxSpeed) {\n      this.vx = this.vx / speed * this.maxSpeed;\n      this.vy = this.vy / speed * this.maxSpeed;\n    }\n\n    // Add current position to trail before updating\n    this.addToTrail(this.x, this.y);\n\n    // Update position\n    this.x += this.vx;\n    this.y += this.vy;\n  }\n\n  // Add current position to the trail\n  addToTrail(x, y) {\n    this.trail.push({\n      x,\n      y\n    });\n    // Keep trail at maximum length\n    if (this.trail.length > this.maxTrailLength) {\n      this.trail.shift(); // Remove the oldest position\n    }\n  }\n\n  // Wrap around edges\n  edges() {\n    const p = this.p;\n    // When wrapping around edges, clear the trail to avoid visual jumps\n    if (this.x > p.width) {\n      this.x = 0;\n      this.clearTrail();\n    }\n    if (this.x < 0) {\n      this.x = p.width;\n      this.clearTrail();\n    }\n    if (this.y > p.height) {\n      this.y = 0;\n      this.clearTrail();\n    }\n    if (this.y < 0) {\n      this.y = p.height;\n      this.clearTrail();\n    }\n  }\n\n  // Clear the trail when wrapping around screen edges\n  clearTrail() {\n    this.trail = [];\n  }\n\n  // Draw the boid\n  show() {\n    const p = this.p;\n\n    // Draw the trail first\n    this.drawTrail();\n\n    // Calculate heading angle\n    const angle = Math.atan2(this.vy, this.vx) + p.HALF_PI;\n    p.push();\n    p.translate(this.x, this.y);\n    p.rotate(angle);\n\n    // Draw a triangle for each boid\n    p.fill(255);\n    p.noStroke();\n    p.beginShape();\n    p.vertex(0, -this.size * 2);\n    p.vertex(-this.size, this.size * 2);\n    p.vertex(this.size, this.size * 2);\n    p.endShape(p.CLOSE);\n    p.pop();\n  }\n\n  // Draw the trail for this boid\n  drawTrail() {\n    const p = this.p;\n    if (this.trail.length < 2) return;\n    p.stroke(255, 255, 255, this.trailOpacity);\n    p.strokeWeight(0.5);\n    p.noFill();\n    p.beginShape();\n    for (const point of this.trail) {\n      p.vertex(point.x, point.y);\n    }\n    p.endShape();\n  }\n\n  // Calculate separation force\n  separate(boids) {\n    const perception = 40;\n    let steerX = 0;\n    let steerY = 0;\n    let count = 0;\n    for (const other of boids) {\n      const dx = this.x - other.x;\n      const dy = this.y - other.y;\n      const d = Math.sqrt(dx * dx + dy * dy);\n      if (other !== this && d < perception) {\n        // Weight by distance\n        steerX += dx / d;\n        steerY += dy / d;\n        count++;\n      }\n    }\n    if (count > 0) {\n      steerX /= count;\n      steerY /= count;\n\n      // Set to max speed\n      const mag = Math.sqrt(steerX * steerX + steerY * steerY);\n      steerX = steerX / mag * this.maxSpeed;\n      steerY = steerY / mag * this.maxSpeed;\n\n      // Subtract current velocity\n      steerX -= this.vx;\n      steerY -= this.vy;\n\n      // Limit force\n      const forceMag = Math.sqrt(steerX * steerX + steerY * steerY);\n      if (forceMag > this.maxForce) {\n        steerX = steerX / forceMag * this.maxForce;\n        steerY = steerY / forceMag * this.maxForce;\n      }\n    }\n    return {\n      x: steerX,\n      y: steerY\n    };\n  }\n\n  // Calculate alignment force\n  align(boids) {\n    const perception = 50;\n    let steerX = 0;\n    let steerY = 0;\n    let count = 0;\n    for (const other of boids) {\n      const dx = this.x - other.x;\n      const dy = this.y - other.y;\n      const d = Math.sqrt(dx * dx + dy * dy);\n      if (other !== this && d < perception) {\n        steerX += other.vx;\n        steerY += other.vy;\n        count++;\n      }\n    }\n    if (count > 0) {\n      steerX /= count;\n      steerY /= count;\n\n      // Set to max speed\n      const mag = Math.sqrt(steerX * steerX + steerY * steerY);\n      steerX = steerX / mag * this.maxSpeed;\n      steerY = steerY / mag * this.maxSpeed;\n\n      // Subtract current velocity\n      steerX -= this.vx;\n      steerY -= this.vy;\n\n      // Limit force\n      const forceMag = Math.sqrt(steerX * steerX + steerY * steerY);\n      if (forceMag > this.maxForce) {\n        steerX = steerX / forceMag * this.maxForce;\n        steerY = steerY / forceMag * this.maxForce;\n      }\n    }\n    return {\n      x: steerX,\n      y: steerY\n    };\n  }\n\n  // Calculate cohesion force\n  cohere(boids) {\n    const perception = 80;\n    let targetX = 0;\n    let targetY = 0;\n    let count = 0;\n    for (const other of boids) {\n      const dx = this.x - other.x;\n      const dy = this.y - other.y;\n      const d = Math.sqrt(dx * dx + dy * dy);\n      if (other !== this && d < perception) {\n        targetX += other.x;\n        targetY += other.y;\n        count++;\n      }\n    }\n    if (count > 0) {\n      targetX /= count;\n      targetY /= count;\n\n      // Direction to target\n      let steerX = targetX - this.x;\n      let steerY = targetY - this.y;\n\n      // Set to max speed\n      const mag = Math.sqrt(steerX * steerX + steerY * steerY);\n      if (mag > 0) {\n        steerX = steerX / mag * this.maxSpeed;\n        steerY = steerY / mag * this.maxSpeed;\n      }\n\n      // Subtract current velocity\n      steerX -= this.vx;\n      steerY -= this.vy;\n\n      // Limit force\n      const forceMag = Math.sqrt(steerX * steerX + steerY * steerY);\n      if (forceMag > this.maxForce) {\n        steerX = steerX / forceMag * this.maxForce;\n        steerY = steerY / forceMag * this.maxForce;\n      }\n      return {\n        x: steerX,\n        y: steerY\n      };\n    } else {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n  }\n}\nexport default SimpleBoid;","map":{"version":3,"names":["SimpleBoid","constructor","p","x","y","angle","random","TWO_PI","speed","vx","cos","vy","sin","ax","ay","maxSpeed","maxForce","size","maxTrailLength","trail","trailOpacity","flock","boids","params","separation","separate","alignment","align","cohesion","cohere","update","Math","sqrt","addToTrail","push","length","shift","edges","width","clearTrail","height","show","drawTrail","atan2","HALF_PI","translate","rotate","fill","noStroke","beginShape","vertex","endShape","CLOSE","pop","stroke","strokeWeight","noFill","point","perception","steerX","steerY","count","other","dx","dy","d","mag","forceMag","targetX","targetY"],"sources":["C:/Users/mttgo/OneDrive/Desktop/Cursor Projects/webapps/flocking-app/src/sketches/simpleBoid.js"],"sourcesContent":["// Class for representing a single boid\r\nclass SimpleBoid {\r\n  constructor(p, x, y) {\r\n    // Store p5 instance\r\n    this.p = p;\r\n    \r\n    // Position\r\n    this.x = x;\r\n    this.y = y;\r\n    \r\n    // Generate random velocity\r\n    const angle = p.random(p.TWO_PI);\r\n    const speed = p.random(2, 4);\r\n    this.vx = p.cos(angle) * speed;\r\n    this.vy = p.sin(angle) * speed;\r\n    \r\n    // Acceleration\r\n    this.ax = 0;\r\n    this.ay = 0;\r\n    \r\n    // Properties\r\n    this.maxSpeed = 5;\r\n    this.maxForce = 0.2;\r\n    this.size = p.random(3, 6);\r\n    \r\n    // Trail history\r\n    this.maxTrailLength = 50; // Maximum number of points to store in the trail\r\n    this.trail = []; // Array to store position history\r\n    this.trailOpacity = p.random(40, 80); // Random opacity for variety\r\n  }\r\n  \r\n  // Apply flocking behavior\r\n  flock(boids, params) {\r\n    // Reset acceleration\r\n    this.ax = 0;\r\n    this.ay = 0;\r\n    \r\n    // Calculate forces\r\n    const separation = this.separate(boids);\r\n    const alignment = this.align(boids);\r\n    const cohesion = this.cohere(boids);\r\n    \r\n    // Apply weights from params\r\n    separation.x *= params.separation || 1.5;\r\n    separation.y *= params.separation || 1.5;\r\n    \r\n    alignment.x *= params.alignment || 1.0;\r\n    alignment.y *= params.alignment || 1.0;\r\n    \r\n    cohesion.x *= params.cohesion || 1.0;\r\n    cohesion.y *= params.cohesion || 1.0;\r\n    \r\n    // Add all forces to acceleration\r\n    this.ax += separation.x + alignment.x + cohesion.x;\r\n    this.ay += separation.y + alignment.y + cohesion.y;\r\n  }\r\n  \r\n  // Update position and velocity\r\n  update() {\r\n    // Update velocity with acceleration\r\n    this.vx += this.ax;\r\n    this.vy += this.ay;\r\n    \r\n    // Limit speed\r\n    const speed = Math.sqrt(this.vx * this.vx + this.vy * this.vy);\r\n    if (speed > this.maxSpeed) {\r\n      this.vx = (this.vx / speed) * this.maxSpeed;\r\n      this.vy = (this.vy / speed) * this.maxSpeed;\r\n    }\r\n    \r\n    // Add current position to trail before updating\r\n    this.addToTrail(this.x, this.y);\r\n    \r\n    // Update position\r\n    this.x += this.vx;\r\n    this.y += this.vy;\r\n  }\r\n  \r\n  // Add current position to the trail\r\n  addToTrail(x, y) {\r\n    this.trail.push({x, y});\r\n    // Keep trail at maximum length\r\n    if (this.trail.length > this.maxTrailLength) {\r\n      this.trail.shift(); // Remove the oldest position\r\n    }\r\n  }\r\n  \r\n  // Wrap around edges\r\n  edges() {\r\n    const p = this.p;\r\n    // When wrapping around edges, clear the trail to avoid visual jumps\r\n    if (this.x > p.width) {\r\n      this.x = 0;\r\n      this.clearTrail();\r\n    }\r\n    if (this.x < 0) {\r\n      this.x = p.width;\r\n      this.clearTrail();\r\n    }\r\n    if (this.y > p.height) {\r\n      this.y = 0;\r\n      this.clearTrail();\r\n    }\r\n    if (this.y < 0) {\r\n      this.y = p.height;\r\n      this.clearTrail();\r\n    }\r\n  }\r\n  \r\n  // Clear the trail when wrapping around screen edges\r\n  clearTrail() {\r\n    this.trail = [];\r\n  }\r\n  \r\n  // Draw the boid\r\n  show() {\r\n    const p = this.p;\r\n    \r\n    // Draw the trail first\r\n    this.drawTrail();\r\n    \r\n    // Calculate heading angle\r\n    const angle = Math.atan2(this.vy, this.vx) + p.HALF_PI;\r\n    \r\n    p.push();\r\n    p.translate(this.x, this.y);\r\n    p.rotate(angle);\r\n    \r\n    // Draw a triangle for each boid\r\n    p.fill(255);\r\n    p.noStroke();\r\n    p.beginShape();\r\n    p.vertex(0, -this.size * 2);\r\n    p.vertex(-this.size, this.size * 2);\r\n    p.vertex(this.size, this.size * 2);\r\n    p.endShape(p.CLOSE);\r\n    \r\n    p.pop();\r\n  }\r\n  \r\n  // Draw the trail for this boid\r\n  drawTrail() {\r\n    const p = this.p;\r\n    if (this.trail.length < 2) return;\r\n    \r\n    p.stroke(255, 255, 255, this.trailOpacity);\r\n    p.strokeWeight(0.5);\r\n    p.noFill();\r\n    \r\n    p.beginShape();\r\n    for (const point of this.trail) {\r\n      p.vertex(point.x, point.y);\r\n    }\r\n    p.endShape();\r\n  }\r\n  \r\n  // Calculate separation force\r\n  separate(boids) {\r\n    const perception = 40;\r\n    let steerX = 0;\r\n    let steerY = 0;\r\n    let count = 0;\r\n    \r\n    for (const other of boids) {\r\n      const dx = this.x - other.x;\r\n      const dy = this.y - other.y;\r\n      const d = Math.sqrt(dx * dx + dy * dy);\r\n      \r\n      if (other !== this && d < perception) {\r\n        // Weight by distance\r\n        steerX += dx / d;\r\n        steerY += dy / d;\r\n        count++;\r\n      }\r\n    }\r\n    \r\n    if (count > 0) {\r\n      steerX /= count;\r\n      steerY /= count;\r\n      \r\n      // Set to max speed\r\n      const mag = Math.sqrt(steerX * steerX + steerY * steerY);\r\n      steerX = steerX / mag * this.maxSpeed;\r\n      steerY = steerY / mag * this.maxSpeed;\r\n      \r\n      // Subtract current velocity\r\n      steerX -= this.vx;\r\n      steerY -= this.vy;\r\n      \r\n      // Limit force\r\n      const forceMag = Math.sqrt(steerX * steerX + steerY * steerY);\r\n      if (forceMag > this.maxForce) {\r\n        steerX = (steerX / forceMag) * this.maxForce;\r\n        steerY = (steerY / forceMag) * this.maxForce;\r\n      }\r\n    }\r\n    \r\n    return { x: steerX, y: steerY };\r\n  }\r\n  \r\n  // Calculate alignment force\r\n  align(boids) {\r\n    const perception = 50;\r\n    let steerX = 0;\r\n    let steerY = 0;\r\n    let count = 0;\r\n    \r\n    for (const other of boids) {\r\n      const dx = this.x - other.x;\r\n      const dy = this.y - other.y;\r\n      const d = Math.sqrt(dx * dx + dy * dy);\r\n      \r\n      if (other !== this && d < perception) {\r\n        steerX += other.vx;\r\n        steerY += other.vy;\r\n        count++;\r\n      }\r\n    }\r\n    \r\n    if (count > 0) {\r\n      steerX /= count;\r\n      steerY /= count;\r\n      \r\n      // Set to max speed\r\n      const mag = Math.sqrt(steerX * steerX + steerY * steerY);\r\n      steerX = steerX / mag * this.maxSpeed;\r\n      steerY = steerY / mag * this.maxSpeed;\r\n      \r\n      // Subtract current velocity\r\n      steerX -= this.vx;\r\n      steerY -= this.vy;\r\n      \r\n      // Limit force\r\n      const forceMag = Math.sqrt(steerX * steerX + steerY * steerY);\r\n      if (forceMag > this.maxForce) {\r\n        steerX = (steerX / forceMag) * this.maxForce;\r\n        steerY = (steerY / forceMag) * this.maxForce;\r\n      }\r\n    }\r\n    \r\n    return { x: steerX, y: steerY };\r\n  }\r\n  \r\n  // Calculate cohesion force\r\n  cohere(boids) {\r\n    const perception = 80;\r\n    let targetX = 0;\r\n    let targetY = 0;\r\n    let count = 0;\r\n    \r\n    for (const other of boids) {\r\n      const dx = this.x - other.x;\r\n      const dy = this.y - other.y;\r\n      const d = Math.sqrt(dx * dx + dy * dy);\r\n      \r\n      if (other !== this && d < perception) {\r\n        targetX += other.x;\r\n        targetY += other.y;\r\n        count++;\r\n      }\r\n    }\r\n    \r\n    if (count > 0) {\r\n      targetX /= count;\r\n      targetY /= count;\r\n      \r\n      // Direction to target\r\n      let steerX = targetX - this.x;\r\n      let steerY = targetY - this.y;\r\n      \r\n      // Set to max speed\r\n      const mag = Math.sqrt(steerX * steerX + steerY * steerY);\r\n      if (mag > 0) {\r\n        steerX = steerX / mag * this.maxSpeed;\r\n        steerY = steerY / mag * this.maxSpeed;\r\n      }\r\n      \r\n      // Subtract current velocity\r\n      steerX -= this.vx;\r\n      steerY -= this.vy;\r\n      \r\n      // Limit force\r\n      const forceMag = Math.sqrt(steerX * steerX + steerY * steerY);\r\n      if (forceMag > this.maxForce) {\r\n        steerX = (steerX / forceMag) * this.maxForce;\r\n        steerY = (steerY / forceMag) * this.maxForce;\r\n      }\r\n      \r\n      return { x: steerX, y: steerY };\r\n    } else {\r\n      return { x: 0, y: 0 };\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleBoid; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}