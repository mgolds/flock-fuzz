{"ast":null,"code":"// Class for representing a single boid\nclass SimpleBoid {\n  constructor(p, x, y, settings, id) {\n    // Store p5 instance\n    this.p = p;\n    this.id = id || 0;\n\n    // Position\n    this.x = x;\n    this.y = y;\n\n    // Generate random velocity\n    const angle = p.random(p.TWO_PI);\n    const speed = p.random(2, 4);\n    this.vx = p.cos(angle) * speed;\n    this.vy = p.sin(angle) * speed;\n\n    // Acceleration\n    this.ax = 0;\n    this.ay = 0;\n\n    // Properties\n    this.maxSpeed = 5;\n    this.maxForce = 0.2;\n    this.size = p.random(3, 6);\n\n    // Trail history\n    this.trail = []; // Array to store position history\n\n    // Generate a consistent random color for this boid\n    this.randomColor = {\n      r: Math.floor(Math.random() * 256),\n      g: Math.floor(Math.random() * 256),\n      b: Math.floor(Math.random() * 256)\n    };\n\n    // Apply settings\n    this.updateSettings(settings);\n  }\n  updateSettings(settings) {\n    if (!settings) return;\n\n    // Store settings\n    this.settings = settings;\n\n    // Trail settings\n    this.maxTrailLength = settings.trailLength || 50;\n    this.trailOpacity = this.p.random(40, 80); // For variety\n\n    // Size multiplier\n    this.sizeMultiplier = settings.agentSize || 1;\n  }\n\n  // Generate a random color\n  generateRandomColor() {\n    // Return the stored random color to maintain consistency\n    return this.randomColor;\n  }\n\n  // Apply flocking behavior\n  flock(boids, params) {\n    // Reset acceleration\n    this.ax = 0;\n    this.ay = 0;\n\n    // Calculate forces\n    const separation = this.separate(boids);\n    const alignment = this.align(boids);\n    const cohesion = this.cohere(boids);\n\n    // Apply weights from params\n    separation.x *= params.separation || 1.5;\n    separation.y *= params.separation || 1.5;\n    alignment.x *= params.alignment || 1.0;\n    alignment.y *= params.alignment || 1.0;\n    cohesion.x *= params.cohesion || 1.0;\n    cohesion.y *= params.cohesion || 1.0;\n\n    // Add all forces to acceleration\n    this.ax += separation.x + alignment.x + cohesion.x;\n    this.ay += separation.y + alignment.y + cohesion.y;\n  }\n\n  // Update position and velocity\n  update() {\n    // Get simulation speed from params (default to 1.0 if not provided)\n    const speed = this.settings.simulationSpeed || 1.0;\n\n    // Update velocity with acceleration\n    this.vx += this.ax;\n    this.vy += this.ay;\n\n    // Limit speed\n    const currentSpeed = Math.sqrt(this.vx * this.vx + this.vy * this.vy);\n    if (currentSpeed > this.maxSpeed) {\n      this.vx = this.vx / currentSpeed * this.maxSpeed;\n      this.vy = this.vy / currentSpeed * this.maxSpeed;\n    }\n\n    // Add current position to trail before updating\n    this.addToTrail(this.x, this.y);\n\n    // Update position with speed multiplier\n    this.x += this.vx * speed;\n    this.y += this.vy * speed;\n  }\n\n  // Add current position to the trail\n  addToTrail(x, y) {\n    // Only add if we want trails\n    if (this.maxTrailLength <= 0) return;\n    this.trail.push({\n      x,\n      y\n    });\n    // Keep trail at maximum length\n    if (this.trail.length > this.maxTrailLength) {\n      this.trail.shift(); // Remove the oldest position\n    }\n  }\n\n  // Wrap around edges\n  edges() {\n    const p = this.p;\n\n    // Always clear the trail when wrapping around edges\n    if (this.x > p.width) {\n      this.x = 0;\n      this.clearTrail();\n    }\n    if (this.x < 0) {\n      this.x = p.width;\n      this.clearTrail();\n    }\n    if (this.y > p.height) {\n      this.y = 0;\n      this.clearTrail();\n    }\n    if (this.y < 0) {\n      this.y = p.height;\n      this.clearTrail();\n    }\n  }\n\n  // Clear the trail when wrapping around screen edges\n  clearTrail() {\n    this.trail = [];\n  }\n\n  // Draw the boid\n  show() {\n    const p = this.p;\n    const settings = this.settings || {};\n\n    // Draw the trail first\n    this.drawTrail();\n\n    // Calculate heading angle\n    const angle = Math.atan2(this.vy, this.vx) + p.HALF_PI;\n\n    // Get agent color\n    let agentColor;\n    if (settings.colors && settings.colors.agent) {\n      // Convert hex to RGB\n      agentColor = this.hexToRgb(settings.colors.agent);\n    } else {\n      agentColor = {\n        r: 255,\n        g: 255,\n        b: 255\n      };\n    }\n    p.push();\n    p.translate(this.x, this.y);\n    p.rotate(angle);\n\n    // Set the fill color\n    p.fill(agentColor.r, agentColor.g, agentColor.b);\n    p.noStroke();\n\n    // Size based on settings\n    const size = this.size * this.sizeMultiplier;\n\n    // Draw the appropriate shape based on settings\n    const shape = settings.agentShape || 'triangle';\n    switch (shape) {\n      case 'circle':\n        p.ellipse(0, 0, size * 2);\n        break;\n      case 'square':\n        p.rectMode(p.CENTER);\n        p.rect(0, 0, size * 2, size * 2);\n        break;\n      case 'custom':\n        // Example custom shape - could be customized more\n        p.beginShape();\n        p.vertex(0, -size * 2);\n        p.vertex(-size, size);\n        p.vertex(0, 0);\n        p.vertex(size, size);\n        p.endShape(p.CLOSE);\n        break;\n      case 'triangle':\n      default:\n        // Triangle is the default shape\n        p.beginShape();\n        p.vertex(0, -size * 2);\n        p.vertex(-size, size * 2);\n        p.vertex(size, size * 2);\n        p.endShape(p.CLOSE);\n    }\n    p.pop();\n  }\n\n  // Draw the trail for this boid\n  drawTrail() {\n    const p = this.p;\n    const settings = this.settings || {};\n    if (this.trail.length < 2) return;\n\n    // Get color based on settings\n    let trailColor;\n    const colorRandomnessValue = settings.colorRandomness || 0;\n    if (colorRandomnessValue <= 0) {\n      // At 0%, use the color from settings\n      const mainColor = settings.colors && settings.colors.main ? this.hexToRgb(settings.colors.main) : {\n        r: 255,\n        g: 255,\n        b: 255\n      };\n      trailColor = mainColor;\n    } else if (colorRandomnessValue >= 100) {\n      // At 100%, use the boid's consistent random color\n      trailColor = this.randomColor;\n    } else {\n      // For values between 0-100, blend main color with random color\n      const mixFactor = colorRandomnessValue / 100;\n\n      // Get main color from settings\n      const mainColor = settings.colors && settings.colors.main ? this.hexToRgb(settings.colors.main) : {\n        r: 255,\n        g: 255,\n        b: 255\n      };\n      trailColor = {\n        r: Math.round(mainColor.r * (1 - mixFactor) + this.randomColor.r * mixFactor),\n        g: Math.round(mainColor.g * (1 - mixFactor) + this.randomColor.g * mixFactor),\n        b: Math.round(mainColor.b * (1 - mixFactor) + this.randomColor.b * mixFactor)\n      };\n    }\n\n    // Set stroke attributes based on settings\n    p.strokeWeight(settings.trailThickness || 0.5);\n\n    // Set opacity\n    const opacity = this.trailOpacity;\n    p.stroke(trailColor.r, trailColor.g, trailColor.b, opacity);\n    p.noFill();\n\n    // Draw based on trail type\n    switch (settings.trailType) {\n      case 'dashed':\n        this.drawDashedLine();\n        break;\n      case 'dotted':\n        this.drawDottedLine();\n        break;\n      case 'points':\n        this.drawPointsLine();\n        break;\n      case 'line':\n      default:\n        this.drawSolidLine();\n    }\n  }\n\n  // Draw a solid line for the trail\n  drawSolidLine() {\n    const p = this.p;\n    p.beginShape();\n    for (const point of this.trail) {\n      p.vertex(point.x, point.y);\n    }\n    p.endShape();\n  }\n\n  // Draw a dashed line for the trail\n  drawDashedLine() {\n    const p = this.p;\n    for (let i = 1; i < this.trail.length; i++) {\n      if (i % 2 === 0) continue; // Skip every other segment for dash effect\n\n      const prev = this.trail[i - 1];\n      const curr = this.trail[i];\n      p.line(prev.x, prev.y, curr.x, curr.y);\n    }\n  }\n\n  // Draw a dotted line for the trail\n  drawDottedLine() {\n    const p = this.p;\n    for (let i = 0; i < this.trail.length; i++) {\n      if (i % 2 === 0) {\n        // Draw dots at every other point\n        const point = this.trail[i];\n        p.ellipse(point.x, point.y, 2);\n      }\n    }\n  }\n\n  // Draw points for the trail\n  drawPointsLine() {\n    const p = this.p;\n    for (const point of this.trail) {\n      p.point(point.x, point.y);\n    }\n  }\n\n  // Helper to convert hex to RGB\n  hexToRgb(hex) {\n    // Default to white if no hex provided\n    if (!hex) return {\n      r: 255,\n      g: 255,\n      b: 255\n    };\n\n    // Remove # if present\n    hex = hex.replace('#', '');\n\n    // Parse hex values\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    return {\n      r,\n      g,\n      b\n    };\n  }\n\n  // Calculate separation force\n  separate(boids) {\n    const perception = 40;\n    let steerX = 0;\n    let steerY = 0;\n    let count = 0;\n    for (const other of boids) {\n      const dx = this.x - other.x;\n      const dy = this.y - other.y;\n      const d = Math.sqrt(dx * dx + dy * dy);\n      if (other !== this && d < perception) {\n        // Weight by distance\n        steerX += dx / d;\n        steerY += dy / d;\n        count++;\n      }\n    }\n    if (count > 0) {\n      steerX /= count;\n      steerY /= count;\n\n      // Set to max speed\n      const mag = Math.sqrt(steerX * steerX + steerY * steerY);\n      steerX = steerX / mag * this.maxSpeed;\n      steerY = steerY / mag * this.maxSpeed;\n\n      // Subtract current velocity\n      steerX -= this.vx;\n      steerY -= this.vy;\n\n      // Limit force\n      const forceMag = Math.sqrt(steerX * steerX + steerY * steerY);\n      if (forceMag > this.maxForce) {\n        steerX = steerX / forceMag * this.maxForce;\n        steerY = steerY / forceMag * this.maxForce;\n      }\n    }\n    return {\n      x: steerX,\n      y: steerY\n    };\n  }\n\n  // Calculate alignment force\n  align(boids) {\n    const perception = 50;\n    let steerX = 0;\n    let steerY = 0;\n    let count = 0;\n    for (const other of boids) {\n      const dx = this.x - other.x;\n      const dy = this.y - other.y;\n      const d = Math.sqrt(dx * dx + dy * dy);\n      if (other !== this && d < perception) {\n        steerX += other.vx;\n        steerY += other.vy;\n        count++;\n      }\n    }\n    if (count > 0) {\n      steerX /= count;\n      steerY /= count;\n\n      // Set to max speed\n      const mag = Math.sqrt(steerX * steerX + steerY * steerY);\n      steerX = steerX / mag * this.maxSpeed;\n      steerY = steerY / mag * this.maxSpeed;\n\n      // Subtract current velocity\n      steerX -= this.vx;\n      steerY -= this.vy;\n\n      // Limit force\n      const forceMag = Math.sqrt(steerX * steerX + steerY * steerY);\n      if (forceMag > this.maxForce) {\n        steerX = steerX / forceMag * this.maxForce;\n        steerY = steerY / forceMag * this.maxForce;\n      }\n    }\n    return {\n      x: steerX,\n      y: steerY\n    };\n  }\n\n  // Calculate cohesion force\n  cohere(boids) {\n    const perception = 80;\n    let targetX = 0;\n    let targetY = 0;\n    let count = 0;\n    for (const other of boids) {\n      const dx = this.x - other.x;\n      const dy = this.y - other.y;\n      const d = Math.sqrt(dx * dx + dy * dy);\n      if (other !== this && d < perception) {\n        targetX += other.x;\n        targetY += other.y;\n        count++;\n      }\n    }\n    if (count > 0) {\n      targetX /= count;\n      targetY /= count;\n\n      // Direction to target\n      let steerX = targetX - this.x;\n      let steerY = targetY - this.y;\n\n      // Set to max speed\n      const mag = Math.sqrt(steerX * steerX + steerY * steerY);\n      if (mag > 0) {\n        steerX = steerX / mag * this.maxSpeed;\n        steerY = steerY / mag * this.maxSpeed;\n      }\n\n      // Subtract current velocity\n      steerX -= this.vx;\n      steerY -= this.vy;\n\n      // Limit force\n      const forceMag = Math.sqrt(steerX * steerX + steerY * steerY);\n      if (forceMag > this.maxForce) {\n        steerX = steerX / forceMag * this.maxForce;\n        steerY = steerY / forceMag * this.maxForce;\n      }\n      return {\n        x: steerX,\n        y: steerY\n      };\n    } else {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n  }\n}\nexport default SimpleBoid;","map":{"version":3,"names":["SimpleBoid","constructor","p","x","y","settings","id","angle","random","TWO_PI","speed","vx","cos","vy","sin","ax","ay","maxSpeed","maxForce","size","trail","randomColor","r","Math","floor","g","b","updateSettings","maxTrailLength","trailLength","trailOpacity","sizeMultiplier","agentSize","generateRandomColor","flock","boids","params","separation","separate","alignment","align","cohesion","cohere","update","simulationSpeed","currentSpeed","sqrt","addToTrail","push","length","shift","edges","width","clearTrail","height","show","drawTrail","atan2","HALF_PI","agentColor","colors","agent","hexToRgb","translate","rotate","fill","noStroke","shape","agentShape","ellipse","rectMode","CENTER","rect","beginShape","vertex","endShape","CLOSE","pop","trailColor","colorRandomnessValue","colorRandomness","mainColor","main","mixFactor","round","strokeWeight","trailThickness","opacity","stroke","noFill","trailType","drawDashedLine","drawDottedLine","drawPointsLine","drawSolidLine","point","i","prev","curr","line","hex","replace","parseInt","substring","perception","steerX","steerY","count","other","dx","dy","d","mag","forceMag","targetX","targetY"],"sources":["C:/Users/mttgo/OneDrive/Desktop/Cursor Projects/webapps/flocking-app/src/sketches/simpleBoid.js"],"sourcesContent":["// Class for representing a single boid\r\nclass SimpleBoid {\r\n  constructor(p, x, y, settings, id) {\r\n    // Store p5 instance\r\n    this.p = p;\r\n    this.id = id || 0;\r\n    \r\n    // Position\r\n    this.x = x;\r\n    this.y = y;\r\n    \r\n    // Generate random velocity\r\n    const angle = p.random(p.TWO_PI);\r\n    const speed = p.random(2, 4);\r\n    this.vx = p.cos(angle) * speed;\r\n    this.vy = p.sin(angle) * speed;\r\n    \r\n    // Acceleration\r\n    this.ax = 0;\r\n    this.ay = 0;\r\n    \r\n    // Properties\r\n    this.maxSpeed = 5;\r\n    this.maxForce = 0.2;\r\n    this.size = p.random(3, 6);\r\n    \r\n    // Trail history\r\n    this.trail = []; // Array to store position history\r\n    \r\n    // Generate a consistent random color for this boid\r\n    this.randomColor = {\r\n      r: Math.floor(Math.random() * 256),\r\n      g: Math.floor(Math.random() * 256),\r\n      b: Math.floor(Math.random() * 256)\r\n    };\r\n    \r\n    // Apply settings\r\n    this.updateSettings(settings);\r\n  }\r\n  \r\n  updateSettings(settings) {\r\n    if (!settings) return;\r\n    \r\n    // Store settings\r\n    this.settings = settings;\r\n    \r\n    // Trail settings\r\n    this.maxTrailLength = settings.trailLength || 50;\r\n    this.trailOpacity = this.p.random(40, 80); // For variety\r\n    \r\n    // Size multiplier\r\n    this.sizeMultiplier = settings.agentSize || 1;\r\n  }\r\n  \r\n  // Generate a random color\r\n  generateRandomColor() {\r\n    // Return the stored random color to maintain consistency\r\n    return this.randomColor;\r\n  }\r\n  \r\n  // Apply flocking behavior\r\n  flock(boids, params) {\r\n    // Reset acceleration\r\n    this.ax = 0;\r\n    this.ay = 0;\r\n    \r\n    // Calculate forces\r\n    const separation = this.separate(boids);\r\n    const alignment = this.align(boids);\r\n    const cohesion = this.cohere(boids);\r\n    \r\n    // Apply weights from params\r\n    separation.x *= params.separation || 1.5;\r\n    separation.y *= params.separation || 1.5;\r\n    \r\n    alignment.x *= params.alignment || 1.0;\r\n    alignment.y *= params.alignment || 1.0;\r\n    \r\n    cohesion.x *= params.cohesion || 1.0;\r\n    cohesion.y *= params.cohesion || 1.0;\r\n    \r\n    // Add all forces to acceleration\r\n    this.ax += separation.x + alignment.x + cohesion.x;\r\n    this.ay += separation.y + alignment.y + cohesion.y;\r\n  }\r\n  \r\n  // Update position and velocity\r\n  update() {\r\n    // Get simulation speed from params (default to 1.0 if not provided)\r\n    const speed = this.settings.simulationSpeed || 1.0;\r\n    \r\n    // Update velocity with acceleration\r\n    this.vx += this.ax;\r\n    this.vy += this.ay;\r\n    \r\n    // Limit speed\r\n    const currentSpeed = Math.sqrt(this.vx * this.vx + this.vy * this.vy);\r\n    if (currentSpeed > this.maxSpeed) {\r\n      this.vx = (this.vx / currentSpeed) * this.maxSpeed;\r\n      this.vy = (this.vy / currentSpeed) * this.maxSpeed;\r\n    }\r\n    \r\n    // Add current position to trail before updating\r\n    this.addToTrail(this.x, this.y);\r\n    \r\n    // Update position with speed multiplier\r\n    this.x += this.vx * speed;\r\n    this.y += this.vy * speed;\r\n  }\r\n  \r\n  // Add current position to the trail\r\n  addToTrail(x, y) {\r\n    // Only add if we want trails\r\n    if (this.maxTrailLength <= 0) return;\r\n    \r\n    this.trail.push({x, y});\r\n    // Keep trail at maximum length\r\n    if (this.trail.length > this.maxTrailLength) {\r\n      this.trail.shift(); // Remove the oldest position\r\n    }\r\n  }\r\n  \r\n  // Wrap around edges\r\n  edges() {\r\n    const p = this.p;\r\n    \r\n    // Always clear the trail when wrapping around edges\r\n    if (this.x > p.width) {\r\n      this.x = 0;\r\n      this.clearTrail();\r\n    }\r\n    if (this.x < 0) {\r\n      this.x = p.width;\r\n      this.clearTrail();\r\n    }\r\n    if (this.y > p.height) {\r\n      this.y = 0;\r\n      this.clearTrail();\r\n    }\r\n    if (this.y < 0) {\r\n      this.y = p.height;\r\n      this.clearTrail();\r\n    }\r\n  }\r\n  \r\n  // Clear the trail when wrapping around screen edges\r\n  clearTrail() {\r\n    this.trail = [];\r\n  }\r\n  \r\n  // Draw the boid\r\n  show() {\r\n    const p = this.p;\r\n    const settings = this.settings || {};\r\n    \r\n    // Draw the trail first\r\n    this.drawTrail();\r\n    \r\n    // Calculate heading angle\r\n    const angle = Math.atan2(this.vy, this.vx) + p.HALF_PI;\r\n    \r\n    // Get agent color\r\n    let agentColor;\r\n    if (settings.colors && settings.colors.agent) {\r\n      // Convert hex to RGB\r\n      agentColor = this.hexToRgb(settings.colors.agent);\r\n    } else {\r\n      agentColor = { r: 255, g: 255, b: 255 };\r\n    }\r\n    \r\n    p.push();\r\n    p.translate(this.x, this.y);\r\n    p.rotate(angle);\r\n    \r\n    // Set the fill color\r\n    p.fill(agentColor.r, agentColor.g, agentColor.b);\r\n    p.noStroke();\r\n    \r\n    // Size based on settings\r\n    const size = this.size * this.sizeMultiplier;\r\n    \r\n    // Draw the appropriate shape based on settings\r\n    const shape = settings.agentShape || 'triangle';\r\n    switch (shape) {\r\n      case 'circle':\r\n        p.ellipse(0, 0, size * 2);\r\n        break;\r\n      case 'square':\r\n        p.rectMode(p.CENTER);\r\n        p.rect(0, 0, size * 2, size * 2);\r\n        break;\r\n      case 'custom':\r\n        // Example custom shape - could be customized more\r\n        p.beginShape();\r\n        p.vertex(0, -size * 2);\r\n        p.vertex(-size, size);\r\n        p.vertex(0, 0);\r\n        p.vertex(size, size);\r\n        p.endShape(p.CLOSE);\r\n        break;\r\n      case 'triangle':\r\n      default:\r\n        // Triangle is the default shape\r\n        p.beginShape();\r\n        p.vertex(0, -size * 2);\r\n        p.vertex(-size, size * 2);\r\n        p.vertex(size, size * 2);\r\n        p.endShape(p.CLOSE);\r\n    }\r\n    \r\n    p.pop();\r\n  }\r\n  \r\n  // Draw the trail for this boid\r\n  drawTrail() {\r\n    const p = this.p;\r\n    const settings = this.settings || {};\r\n    \r\n    if (this.trail.length < 2) return;\r\n    \r\n    // Get color based on settings\r\n    let trailColor;\r\n    const colorRandomnessValue = settings.colorRandomness || 0;\r\n    \r\n    if (colorRandomnessValue <= 0) {\r\n      // At 0%, use the color from settings\r\n      const mainColor = settings.colors && settings.colors.main ? \r\n        this.hexToRgb(settings.colors.main) : \r\n        { r: 255, g: 255, b: 255 };\r\n      trailColor = mainColor;\r\n    } else if (colorRandomnessValue >= 100) {\r\n      // At 100%, use the boid's consistent random color\r\n      trailColor = this.randomColor;\r\n    } else {\r\n      // For values between 0-100, blend main color with random color\r\n      const mixFactor = colorRandomnessValue / 100;\r\n      \r\n      // Get main color from settings\r\n      const mainColor = settings.colors && settings.colors.main ? \r\n        this.hexToRgb(settings.colors.main) : \r\n        { r: 255, g: 255, b: 255 };\r\n      \r\n      trailColor = {\r\n        r: Math.round(mainColor.r * (1 - mixFactor) + this.randomColor.r * mixFactor),\r\n        g: Math.round(mainColor.g * (1 - mixFactor) + this.randomColor.g * mixFactor),\r\n        b: Math.round(mainColor.b * (1 - mixFactor) + this.randomColor.b * mixFactor)\r\n      };\r\n    }\r\n    \r\n    // Set stroke attributes based on settings\r\n    p.strokeWeight(settings.trailThickness || 0.5);\r\n    \r\n    // Set opacity\r\n    const opacity = this.trailOpacity;\r\n    p.stroke(trailColor.r, trailColor.g, trailColor.b, opacity);\r\n    p.noFill();\r\n    \r\n    // Draw based on trail type\r\n    switch (settings.trailType) {\r\n      case 'dashed':\r\n        this.drawDashedLine();\r\n        break;\r\n      case 'dotted':\r\n        this.drawDottedLine();\r\n        break;\r\n      case 'points':\r\n        this.drawPointsLine();\r\n        break;\r\n      case 'line':\r\n      default:\r\n        this.drawSolidLine();\r\n    }\r\n  }\r\n  \r\n  // Draw a solid line for the trail\r\n  drawSolidLine() {\r\n    const p = this.p;\r\n    \r\n    p.beginShape();\r\n    for (const point of this.trail) {\r\n      p.vertex(point.x, point.y);\r\n    }\r\n    p.endShape();\r\n  }\r\n  \r\n  // Draw a dashed line for the trail\r\n  drawDashedLine() {\r\n    const p = this.p;\r\n    \r\n    for (let i = 1; i < this.trail.length; i++) {\r\n      if (i % 2 === 0) continue; // Skip every other segment for dash effect\r\n      \r\n      const prev = this.trail[i-1];\r\n      const curr = this.trail[i];\r\n      p.line(prev.x, prev.y, curr.x, curr.y);\r\n    }\r\n  }\r\n  \r\n  // Draw a dotted line for the trail\r\n  drawDottedLine() {\r\n    const p = this.p;\r\n    \r\n    for (let i = 0; i < this.trail.length; i++) {\r\n      if (i % 2 === 0) { // Draw dots at every other point\r\n        const point = this.trail[i];\r\n        p.ellipse(point.x, point.y, 2);\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Draw points for the trail\r\n  drawPointsLine() {\r\n    const p = this.p;\r\n    \r\n    for (const point of this.trail) {\r\n      p.point(point.x, point.y);\r\n    }\r\n  }\r\n  \r\n  // Helper to convert hex to RGB\r\n  hexToRgb(hex) {\r\n    // Default to white if no hex provided\r\n    if (!hex) return { r: 255, g: 255, b: 255 };\r\n    \r\n    // Remove # if present\r\n    hex = hex.replace('#', '');\r\n    \r\n    // Parse hex values\r\n    const r = parseInt(hex.substring(0, 2), 16);\r\n    const g = parseInt(hex.substring(2, 4), 16);\r\n    const b = parseInt(hex.substring(4, 6), 16);\r\n    \r\n    return { r, g, b };\r\n  }\r\n  \r\n  // Calculate separation force\r\n  separate(boids) {\r\n    const perception = 40;\r\n    let steerX = 0;\r\n    let steerY = 0;\r\n    let count = 0;\r\n    \r\n    for (const other of boids) {\r\n      const dx = this.x - other.x;\r\n      const dy = this.y - other.y;\r\n      const d = Math.sqrt(dx * dx + dy * dy);\r\n      \r\n      if (other !== this && d < perception) {\r\n        // Weight by distance\r\n        steerX += dx / d;\r\n        steerY += dy / d;\r\n        count++;\r\n      }\r\n    }\r\n    \r\n    if (count > 0) {\r\n      steerX /= count;\r\n      steerY /= count;\r\n      \r\n      // Set to max speed\r\n      const mag = Math.sqrt(steerX * steerX + steerY * steerY);\r\n      steerX = steerX / mag * this.maxSpeed;\r\n      steerY = steerY / mag * this.maxSpeed;\r\n      \r\n      // Subtract current velocity\r\n      steerX -= this.vx;\r\n      steerY -= this.vy;\r\n      \r\n      // Limit force\r\n      const forceMag = Math.sqrt(steerX * steerX + steerY * steerY);\r\n      if (forceMag > this.maxForce) {\r\n        steerX = (steerX / forceMag) * this.maxForce;\r\n        steerY = (steerY / forceMag) * this.maxForce;\r\n      }\r\n    }\r\n    \r\n    return { x: steerX, y: steerY };\r\n  }\r\n  \r\n  // Calculate alignment force\r\n  align(boids) {\r\n    const perception = 50;\r\n    let steerX = 0;\r\n    let steerY = 0;\r\n    let count = 0;\r\n    \r\n    for (const other of boids) {\r\n      const dx = this.x - other.x;\r\n      const dy = this.y - other.y;\r\n      const d = Math.sqrt(dx * dx + dy * dy);\r\n      \r\n      if (other !== this && d < perception) {\r\n        steerX += other.vx;\r\n        steerY += other.vy;\r\n        count++;\r\n      }\r\n    }\r\n    \r\n    if (count > 0) {\r\n      steerX /= count;\r\n      steerY /= count;\r\n      \r\n      // Set to max speed\r\n      const mag = Math.sqrt(steerX * steerX + steerY * steerY);\r\n      steerX = steerX / mag * this.maxSpeed;\r\n      steerY = steerY / mag * this.maxSpeed;\r\n      \r\n      // Subtract current velocity\r\n      steerX -= this.vx;\r\n      steerY -= this.vy;\r\n      \r\n      // Limit force\r\n      const forceMag = Math.sqrt(steerX * steerX + steerY * steerY);\r\n      if (forceMag > this.maxForce) {\r\n        steerX = (steerX / forceMag) * this.maxForce;\r\n        steerY = (steerY / forceMag) * this.maxForce;\r\n      }\r\n    }\r\n    \r\n    return { x: steerX, y: steerY };\r\n  }\r\n  \r\n  // Calculate cohesion force\r\n  cohere(boids) {\r\n    const perception = 80;\r\n    let targetX = 0;\r\n    let targetY = 0;\r\n    let count = 0;\r\n    \r\n    for (const other of boids) {\r\n      const dx = this.x - other.x;\r\n      const dy = this.y - other.y;\r\n      const d = Math.sqrt(dx * dx + dy * dy);\r\n      \r\n      if (other !== this && d < perception) {\r\n        targetX += other.x;\r\n        targetY += other.y;\r\n        count++;\r\n      }\r\n    }\r\n    \r\n    if (count > 0) {\r\n      targetX /= count;\r\n      targetY /= count;\r\n      \r\n      // Direction to target\r\n      let steerX = targetX - this.x;\r\n      let steerY = targetY - this.y;\r\n      \r\n      // Set to max speed\r\n      const mag = Math.sqrt(steerX * steerX + steerY * steerY);\r\n      if (mag > 0) {\r\n        steerX = steerX / mag * this.maxSpeed;\r\n        steerY = steerY / mag * this.maxSpeed;\r\n      }\r\n      \r\n      // Subtract current velocity\r\n      steerX -= this.vx;\r\n      steerY -= this.vy;\r\n      \r\n      // Limit force\r\n      const forceMag = Math.sqrt(steerX * steerX + steerY * steerY);\r\n      if (forceMag > this.maxForce) {\r\n        steerX = (steerX / forceMag) * this.maxForce;\r\n        steerY = (steerY / forceMag) * this.maxForce;\r\n      }\r\n      \r\n      return { x: steerX, y: steerY };\r\n    } else {\r\n      return { x: 0, y: 0 };\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleBoid; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}