{"ast":null,"code":"export const flockingSketch = (p, initialParams) => {\n  let boids = [];\n  let params = {\n    ...initialParams\n  };\n  let isDragging = false;\n  let lastMouseX = 0;\n  let lastMouseY = 0;\n  let addCooldown = 0;\n\n  // Method to update params from outside\n  p.updateParams = newParams => {\n    params = {\n      ...newParams\n    };\n  };\n  p.setup = () => {\n    const canvasWidth = window.innerWidth;\n    const canvasHeight = window.innerHeight - 200; // Account for controls\n    p.createCanvas(canvasWidth, canvasHeight);\n\n    // Initialize with some boids\n    for (let i = 0; i < 50; i++) {\n      boids.push(new Boid(p.random(p.width), p.random(p.height)));\n    }\n  };\n  p.windowResized = () => {\n    const canvasWidth = window.innerWidth;\n    const canvasHeight = window.innerHeight - 200;\n    p.resizeCanvas(canvasWidth, canvasHeight);\n  };\n  p.mousePressed = () => {\n    if (p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\n      isDragging = true;\n      lastMouseX = p.mouseX;\n      lastMouseY = p.mouseY;\n\n      // Add boids on initial click\n      addBoidsAtPosition(p.mouseX, p.mouseY);\n    }\n  };\n  p.mouseReleased = () => {\n    isDragging = false;\n    addCooldown = 0;\n  };\n  p.mouseDragged = () => {\n    if (isDragging && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\n      // Add boids when dragging with a cooldown to control rate\n      if (addCooldown <= 0) {\n        addBoidsAtPosition(p.mouseX, p.mouseY);\n        addCooldown = 5; // Frames to wait before adding more boids\n      } else {\n        addCooldown--;\n      }\n      lastMouseX = p.mouseX;\n      lastMouseY = p.mouseY;\n    }\n  };\n  const addBoidsAtPosition = (x, y) => {\n    const count = params.newAgents || 5;\n    for (let i = 0; i < count; i++) {\n      const boid = new Boid(x + p.random(-10, 10), y + p.random(-10, 10));\n      boids.push(boid);\n    }\n  };\n  p.draw = () => {\n    p.background(0);\n    for (let boid of boids) {\n      boid.flock(boids, params);\n      boid.update();\n      boid.edges();\n      boid.show();\n    }\n\n    // Draw cursor trail when dragging\n    if (isDragging && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\n      p.stroke(100, 200, 255, 100);\n      p.strokeWeight(2);\n      p.line(lastMouseX, lastMouseY, p.mouseX, p.mouseY);\n    }\n  };\n  class Boid {\n    constructor(x, y) {\n      this.position = p.createVector(x, y);\n      this.velocity = p5.Vector.random2D();\n      this.velocity.setMag(p.random(2, 4));\n      this.acceleration = p.createVector();\n      this.maxForce = 0.2;\n      this.maxSpeed = 5;\n      this.size = p.random(3, 6);\n    }\n    flock(boids, params) {\n      this.acceleration.mult(0);\n      const separation = this.separate(boids);\n      const alignment = this.align(boids);\n      const cohesion = this.cohere(boids);\n\n      // Apply forces with parameters\n      separation.mult(params.separation || 1.5);\n      alignment.mult(params.alignment || 1.0);\n      cohesion.mult(params.cohesion || 1.0);\n      this.acceleration.add(separation);\n      this.acceleration.add(alignment);\n      this.acceleration.add(cohesion);\n    }\n    update() {\n      this.velocity.add(this.acceleration);\n      this.velocity.limit(this.maxSpeed);\n      this.position.add(this.velocity);\n    }\n    edges() {\n      if (this.position.x > p.width) this.position.x = 0;\n      if (this.position.x < 0) this.position.x = p.width;\n      if (this.position.y > p.height) this.position.y = 0;\n      if (this.position.y < 0) this.position.y = p.height;\n    }\n    show() {\n      // Calculate heading angle\n      const theta = this.velocity.heading() + p.PI / 2;\n      p.push();\n      p.translate(this.position.x, this.position.y);\n      p.rotate(theta);\n\n      // Draw a triangle for each boid\n      p.fill(255);\n      p.noStroke();\n      p.beginShape();\n      p.vertex(0, -this.size * 2);\n      p.vertex(-this.size, this.size * 2);\n      p.vertex(this.size, this.size * 2);\n      p.endShape(p.CLOSE);\n      p.pop();\n    }\n    align(boids) {\n      let perceptionRadius = 50;\n      let steering = p.createVector();\n      let total = 0;\n      for (let other of boids) {\n        let d = p.dist(this.position.x, this.position.y, other.position.x, other.position.y);\n        if (other !== this && d < perceptionRadius) {\n          steering.add(other.velocity);\n          total++;\n        }\n      }\n      if (total > 0) {\n        steering.div(total);\n        steering.setMag(this.maxSpeed);\n        steering.sub(this.velocity);\n        steering.limit(this.maxForce);\n      }\n      return steering;\n    }\n    cohere(boids) {\n      let perceptionRadius = 80;\n      let steering = p.createVector();\n      let total = 0;\n      for (let other of boids) {\n        let d = p.dist(this.position.x, this.position.y, other.position.x, other.position.y);\n        if (other !== this && d < perceptionRadius) {\n          steering.add(other.position);\n          total++;\n        }\n      }\n      if (total > 0) {\n        steering.div(total);\n        steering.sub(this.position);\n        steering.setMag(this.maxSpeed);\n        steering.sub(this.velocity);\n        steering.limit(this.maxForce);\n      }\n      return steering;\n    }\n    separate(boids) {\n      let perceptionRadius = 40;\n      let steering = p.createVector();\n      let total = 0;\n      for (let other of boids) {\n        let d = p.dist(this.position.x, this.position.y, other.position.x, other.position.y);\n        if (other !== this && d < perceptionRadius) {\n          let diff = p.createVector(this.position.x - other.position.x, this.position.y - other.position.y);\n          diff.div(d); // Weight by distance\n          steering.add(diff);\n          total++;\n        }\n      }\n      if (total > 0) {\n        steering.div(total);\n        steering.setMag(this.maxSpeed);\n        steering.sub(this.velocity);\n        steering.limit(this.maxForce);\n      }\n      return steering;\n    }\n  }\n};","map":{"version":3,"names":["flockingSketch","p","initialParams","boids","params","isDragging","lastMouseX","lastMouseY","addCooldown","updateParams","newParams","setup","canvasWidth","window","innerWidth","canvasHeight","innerHeight","createCanvas","i","push","Boid","random","width","height","windowResized","resizeCanvas","mousePressed","mouseX","mouseY","addBoidsAtPosition","mouseReleased","mouseDragged","x","y","count","newAgents","boid","draw","background","flock","update","edges","show","stroke","strokeWeight","line","constructor","position","createVector","velocity","p5","Vector","random2D","setMag","acceleration","maxForce","maxSpeed","size","mult","separation","separate","alignment","align","cohesion","cohere","add","limit","theta","heading","PI","translate","rotate","fill","noStroke","beginShape","vertex","endShape","CLOSE","pop","perceptionRadius","steering","total","other","d","dist","div","sub","diff"],"sources":["C:/Users/mttgo/OneDrive/Desktop/Cursor Projects/webapps/flocking-app/src/sketches/flockingSketch.js"],"sourcesContent":["export const flockingSketch = (p, initialParams) => {\r\n  let boids = [];\r\n  let params = { ...initialParams };\r\n  let isDragging = false;\r\n  let lastMouseX = 0;\r\n  let lastMouseY = 0;\r\n  let addCooldown = 0;\r\n  \r\n  // Method to update params from outside\r\n  p.updateParams = (newParams) => {\r\n    params = { ...newParams };\r\n  };\r\n  \r\n  p.setup = () => {\r\n    const canvasWidth = window.innerWidth;\r\n    const canvasHeight = window.innerHeight - 200; // Account for controls\r\n    p.createCanvas(canvasWidth, canvasHeight);\r\n    \r\n    // Initialize with some boids\r\n    for (let i = 0; i < 50; i++) {\r\n      boids.push(new Boid(p.random(p.width), p.random(p.height)));\r\n    }\r\n  };\r\n  \r\n  p.windowResized = () => {\r\n    const canvasWidth = window.innerWidth;\r\n    const canvasHeight = window.innerHeight - 200;\r\n    p.resizeCanvas(canvasWidth, canvasHeight);\r\n  };\r\n  \r\n  p.mousePressed = () => {\r\n    if (p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\r\n      isDragging = true;\r\n      lastMouseX = p.mouseX;\r\n      lastMouseY = p.mouseY;\r\n      \r\n      // Add boids on initial click\r\n      addBoidsAtPosition(p.mouseX, p.mouseY);\r\n    }\r\n  };\r\n  \r\n  p.mouseReleased = () => {\r\n    isDragging = false;\r\n    addCooldown = 0;\r\n  };\r\n  \r\n  p.mouseDragged = () => {\r\n    if (isDragging && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\r\n      // Add boids when dragging with a cooldown to control rate\r\n      if (addCooldown <= 0) {\r\n        addBoidsAtPosition(p.mouseX, p.mouseY);\r\n        addCooldown = 5; // Frames to wait before adding more boids\r\n      } else {\r\n        addCooldown--;\r\n      }\r\n      lastMouseX = p.mouseX;\r\n      lastMouseY = p.mouseY;\r\n    }\r\n  };\r\n  \r\n  const addBoidsAtPosition = (x, y) => {\r\n    const count = params.newAgents || 5;\r\n    for (let i = 0; i < count; i++) {\r\n      const boid = new Boid(\r\n        x + p.random(-10, 10),\r\n        y + p.random(-10, 10)\r\n      );\r\n      boids.push(boid);\r\n    }\r\n  };\r\n  \r\n  p.draw = () => {\r\n    p.background(0);\r\n    \r\n    for (let boid of boids) {\r\n      boid.flock(boids, params);\r\n      boid.update();\r\n      boid.edges();\r\n      boid.show();\r\n    }\r\n    \r\n    // Draw cursor trail when dragging\r\n    if (isDragging && p.mouseX >= 0 && p.mouseX <= p.width && p.mouseY >= 0 && p.mouseY <= p.height) {\r\n      p.stroke(100, 200, 255, 100);\r\n      p.strokeWeight(2);\r\n      p.line(lastMouseX, lastMouseY, p.mouseX, p.mouseY);\r\n    }\r\n  };\r\n  \r\n  class Boid {\r\n    constructor(x, y) {\r\n      this.position = p.createVector(x, y);\r\n      this.velocity = p5.Vector.random2D();\r\n      this.velocity.setMag(p.random(2, 4));\r\n      this.acceleration = p.createVector();\r\n      this.maxForce = 0.2;\r\n      this.maxSpeed = 5;\r\n      this.size = p.random(3, 6);\r\n    }\r\n    \r\n    flock(boids, params) {\r\n      this.acceleration.mult(0);\r\n      \r\n      const separation = this.separate(boids);\r\n      const alignment = this.align(boids);\r\n      const cohesion = this.cohere(boids);\r\n      \r\n      // Apply forces with parameters\r\n      separation.mult(params.separation || 1.5);\r\n      alignment.mult(params.alignment || 1.0);\r\n      cohesion.mult(params.cohesion || 1.0);\r\n      \r\n      this.acceleration.add(separation);\r\n      this.acceleration.add(alignment);\r\n      this.acceleration.add(cohesion);\r\n    }\r\n    \r\n    update() {\r\n      this.velocity.add(this.acceleration);\r\n      this.velocity.limit(this.maxSpeed);\r\n      this.position.add(this.velocity);\r\n    }\r\n    \r\n    edges() {\r\n      if (this.position.x > p.width) this.position.x = 0;\r\n      if (this.position.x < 0) this.position.x = p.width;\r\n      if (this.position.y > p.height) this.position.y = 0;\r\n      if (this.position.y < 0) this.position.y = p.height;\r\n    }\r\n    \r\n    show() {\r\n      // Calculate heading angle\r\n      const theta = this.velocity.heading() + p.PI/2;\r\n      \r\n      p.push();\r\n      p.translate(this.position.x, this.position.y);\r\n      p.rotate(theta);\r\n      \r\n      // Draw a triangle for each boid\r\n      p.fill(255);\r\n      p.noStroke();\r\n      p.beginShape();\r\n      p.vertex(0, -this.size*2);\r\n      p.vertex(-this.size, this.size*2);\r\n      p.vertex(this.size, this.size*2);\r\n      p.endShape(p.CLOSE);\r\n      \r\n      p.pop();\r\n    }\r\n    \r\n    align(boids) {\r\n      let perceptionRadius = 50;\r\n      let steering = p.createVector();\r\n      let total = 0;\r\n      \r\n      for (let other of boids) {\r\n        let d = p.dist(\r\n          this.position.x, this.position.y,\r\n          other.position.x, other.position.y\r\n        );\r\n        \r\n        if (other !== this && d < perceptionRadius) {\r\n          steering.add(other.velocity);\r\n          total++;\r\n        }\r\n      }\r\n      \r\n      if (total > 0) {\r\n        steering.div(total);\r\n        steering.setMag(this.maxSpeed);\r\n        steering.sub(this.velocity);\r\n        steering.limit(this.maxForce);\r\n      }\r\n      \r\n      return steering;\r\n    }\r\n    \r\n    cohere(boids) {\r\n      let perceptionRadius = 80;\r\n      let steering = p.createVector();\r\n      let total = 0;\r\n      \r\n      for (let other of boids) {\r\n        let d = p.dist(\r\n          this.position.x, this.position.y,\r\n          other.position.x, other.position.y\r\n        );\r\n        \r\n        if (other !== this && d < perceptionRadius) {\r\n          steering.add(other.position);\r\n          total++;\r\n        }\r\n      }\r\n      \r\n      if (total > 0) {\r\n        steering.div(total);\r\n        steering.sub(this.position);\r\n        steering.setMag(this.maxSpeed);\r\n        steering.sub(this.velocity);\r\n        steering.limit(this.maxForce);\r\n      }\r\n      \r\n      return steering;\r\n    }\r\n    \r\n    separate(boids) {\r\n      let perceptionRadius = 40;\r\n      let steering = p.createVector();\r\n      let total = 0;\r\n      \r\n      for (let other of boids) {\r\n        let d = p.dist(\r\n          this.position.x, this.position.y,\r\n          other.position.x, other.position.y\r\n        );\r\n        \r\n        if (other !== this && d < perceptionRadius) {\r\n          let diff = p.createVector(\r\n            this.position.x - other.position.x,\r\n            this.position.y - other.position.y\r\n          );\r\n          diff.div(d); // Weight by distance\r\n          steering.add(diff);\r\n          total++;\r\n        }\r\n      }\r\n      \r\n      if (total > 0) {\r\n        steering.div(total);\r\n        steering.setMag(this.maxSpeed);\r\n        steering.sub(this.velocity);\r\n        steering.limit(this.maxForce);\r\n      }\r\n      \r\n      return steering;\r\n    }\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}